generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                  String                       @id @default(uuid())
  email                               String                       @unique
  password                            String
  firstName                           String
  lastName                            String
  role                                UserRoleEnum                 @default(OPERATOR)
  facilitiyCreatedBy                  Facility[]                   @relation("facilityCreatedBy")
  facilitiyUpdatedBy                  Facility[]                   @relation("facilityUpdatedBy")
  satellityCreatedBy                  Satellite[]                  @relation("satelliteCreatedBy")
  satellityUpdatedBy                  Satellite[]                  @relation("satelliteUpdatedBy")
  pipelineCreatedBy                   Pipeline[]                   @relation("pipelineCreatedBy")
  pipelineUpdatedBy                   Pipeline[]                   @relation("pipelineUpdatedBy")
  pipelineTypeCreatedBy               PipelineType[]               @relation("pipelineTypeCreatedBy")
  pipelineTypeUpdatedBy               PipelineType[]               @relation("pipelineTypeUpdatedBy")
  pipelineGradeCreatedBy              PipelineGrade[]              @relation("pipelineGradeCreatedBy")
  pipelineGradeUpdatedBy              PipelineGrade[]              @relation("pipelineGradeUpdatedBy")
  pipelineFromToFeatureCreatedBy      PipelineFromToFeature[]      @relation("pipelineFromToFeatureCreatedBy")
  pipelineFromToFeatureUpdatedBy      PipelineFromToFeature[]      @relation("pipelineFromToFeatureUpdatedBy")
  pipelineMaterialCreatedBy           PipelineMaterial[]           @relation("pipelineMaterialCreatedBy")
  pipelineMaterialUpdatedBy           PipelineMaterial[]           @relation("pipelineMaterialUpdatedBy")
  pipelineInternalProtectionCreatedBy PipelineInternalProtection[] @relation("pipelineInternalProtectionCreatedBy")
  pipelineInternalProtectionUpdatedBy PipelineInternalProtection[] @relation("pipelineInternalProtectionUpdatedBy")
  pipelinesOnPipelinesCreatedBy       PipelinesOnPipelines[]       @relation("pipelinesOnPipelinesCreatedBy")
  pipelinesOnPipelinesUpdatedBy       PipelinesOnPipelines[]       @relation("pipelinesOnPipelinesUpdatedBy")
  licenseChangeCreatedBy              LicenseChange[]              @relation("licenseChangeCreatedBy")
  licenseChangeUpdatedBy              LicenseChange[]              @relation("licenseChangeUpdatedBy")
  licenseChangeStatusCreatedBy        LicenseChangeStatus[]        @relation("licenseChangeStatusCreatedBy")
  licenseChangeStatusUpdatedBy        LicenseChangeStatus[]        @relation("licenseChangeStatusUpdatedBy")
  licenseChangeSubstanceCreatedBy     LicenseChangeSubstance[]     @relation("licenseChangeSubstanceCreatedBy")
  licenseChangeSubstanceUpdatedBy     LicenseChangeSubstance[]     @relation("licenseChangeSubstanceUpdatedBy")
  wellCreatedBy                       Well[]                       @relation("wellCreatedBy")
  wellUpdatedBy                       Well[]                       @relation("wellUpdatedBy")
  salesPointsCreatedBy                SalesPoint[]                 @relation("salesPointCreatedBy")
  salesPointsUpdatedBy                SalesPoint[]                 @relation("salesPointUpdatedBy")
  pigRunOperator                      PigRun[]                     @relation("pigRunOperator")
  pigRunCreatedBy                     PigRun[]                     @relation("pigRunCreatedBy")
  pigRunUpdatedBy                     PigRun[]                     @relation("pigRunUpdatedBy")
  pressureTestCreatedBy               PressureTest[]               @relation("pressureTestCreatedBy")
  pressureTestUpdatedBy               PressureTest[]               @relation("pressureTestUpdatedBy")
  pipelineBatcheCreatedBy             PipelineBatch[]              @relation("pipelineBatchCreatedBy")
  pipelineBatcheUpdatedBy             PipelineBatch[]              @relation("pipelineBatchUpdatedBy")
  wellBatchCreatedBy                  WellBatch[]                  @relation("wellBatchCreatedBy")
  wellBatchUpdatedBy                  WellBatch[]                  @relation("wellBatchUpdatedBy")
  batchProductCreatedBy               BatchProduct[]               @relation("batchProductCreatedBy")
  batchProductUpdatedBy               BatchProduct[]               @relation("batchProductUpdatedBy")
  pigTypeCreatedBy                    PigType[]                    @relation("pigTypeCreatedBy")
  pigTypeUpdatedBy                    PigType[]                    @relation("pigTypeUpdatedBy")
  riskCreatedBy                       Risk[]                       @relation("riskCreatedBy")
  riskUpdatedBy                       Risk[]                       @relation("riskUpdatedBy")
  chemicalCreatedBy                   Chemical[]                   @relation("chemicalCreatedBy")
  chemicalUpdatedBy                   Chemical[]                   @relation("chemicalUpdatedBy")
  chemicalSupplierCreatedBy           ChemicalSupplier[]           @relation("chemicalSupplierCreatedBy")
  chemicalSupplierUpdatedBy           ChemicalSupplier[]           @relation("chemicalSupplierUpdatedBy")
}

enum UserRoleEnum {
  ADMIN      @map("Admin")
  ENGINEER   @map("Engineer")
  OFFICE     @map("Office")
  OPERATOR   @map("Operator")
  CHEMICAL   @map("Chemical")
  CATHODIC   @map("Cathodic")
  CONTRACTOR @map("Contractor")

  @@map("user_role")
}

model ChangePassword {
  key       String
  value     String
  createdAt DateTime @default(now())

  @@id([key, value])
}

model Facility {
  id          String      @id @default(uuid())
  name        String      @unique
  satellites  Satellite[]
  createdBy   User        @relation("facilityCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime    @default(now())
  updatedBy   User        @relation("facilityUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedAt   DateTime    @updatedAt
}

model Satellite {
  id          String     @id @default(uuid())
  name        String     @unique
  facility    Facility?  @relation(fields: [facilityId], references: [id])
  facilityId  String?
  pipelines   Pipeline[]
  createdBy   User       @relation("satelliteCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime   @default(now())
  updatedBy   User       @relation("satelliteUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedAt   DateTime   @updatedAt
}

model Pipeline {
  id                           String                       @id @default(uuid())
  satellite                    Satellite?                   @relation(fields: [satelliteId], references: [id])
  satelliteId                  String?
  wells                        Well[]
  salesPoints                  SalesPoint[]
  pigRuns                      PigRun[]
  risk                         Risk?
  chemical                     Chemical?
  license                      String
  segment                      String
  from                         String
  fromFeature                  PipelineFromToFeature?       @relation("fromFeature", fields: [fromFeatureId], references: [id])
  fromFeatureId                String?
  to                           String
  toFeature                    PipelineFromToFeature?       @relation("toFeature", fields: [toFeatureId], references: [id])
  toFeatureId                  String?
  licenseChanges               LicenseChange[]
  length                       Float
  pipelineType                 PipelineType?                @relation(fields: [pipelineTypeId], references: [id])
  pipelineTypeId               String?
  pipelineGrade                PipelineGrade?               @relation(fields: [pipelineGradeId], references: [id])
  pipelineGradeId              String?
  yieldStrength                Int?
  outsideDiameter              Float?
  wallThickness                Float?
  pipelineMaterial             PipelineMaterial?            @relation(fields: [pipelineMaterialId], references: [id])
  pipelineMaterialId           String?
  mop                          Int?
  pipelineInternalProtection   PipelineInternalProtection?  @relation(fields: [pipelineInternalProtectionId], references: [id])
  pipelineInternalProtectionId String?
  piggable                     Boolean?
  piggingFrequency             Int?
  flowCalculationDirection     FlowCalculationDirectionEnum
  upstream                     PipelinesOnPipelines[]       @relation("upstream")
  downstream                   PipelinesOnPipelines[]       @relation("downstream")
  pressureTests                PressureTest[]
  pipelineBatches              PipelineBatch[]
  comment                      String?
  createdBy                    User                         @relation("pipelineCreatedBy", fields: [createdById], references: [id])
  createdById                  String
  createdAt                    DateTime                     @default(now())
  updatedBy                    User                         @relation("pipelineUpdatedBy", fields: [updatedById], references: [id])
  updatedById                  String
  updatedAt                    DateTime                     @updatedAt

  @@unique([license, segment])
}

model PipelineType {
  id          String     @id @default(uuid())
  pipelines   Pipeline[]
  type        String     @unique
  description String?
  createdBy   User       @relation("pipelineTypeCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime   @default(now())
  updatedBy   User       @relation("pipelineTypeUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedAt   DateTime   @updatedAt
}

model PipelineGrade {
  id          String     @id @default(uuid())
  pipelines   Pipeline[]
  grade       String     @unique
  description String?
  createdBy   User       @relation("pipelineGradeCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime   @default(now())
  updatedBy   User       @relation("pipelineGradeUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedAt   DateTime   @updatedAt
}

model PipelineFromToFeature {
  id                   String     @id @default(uuid())
  pipelinesFromFeature Pipeline[] @relation("fromFeature")
  pipelinesToFeature   Pipeline[] @relation("toFeature")
  feature              String     @unique
  description          String?
  createdBy            User       @relation("pipelineFromToFeatureCreatedBy", fields: [createdById], references: [id])
  createdById          String
  createdAt            DateTime   @default(now())
  updatedBy            User       @relation("pipelineFromToFeatureUpdatedBy", fields: [updatedById], references: [id])
  updatedById          String
  updatedAt            DateTime   @updatedAt
}

model PipelineMaterial {
  id          String     @id @default(uuid())
  pipelines   Pipeline[]
  material    String     @unique
  description String?
  createdBy   User       @relation("pipelineMaterialCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime   @default(now())
  updatedBy   User       @relation("pipelineMaterialUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedAt   DateTime   @updatedAt
}

model PipelineInternalProtection {
  id                 String     @id @default(uuid())
  pipelines          Pipeline[]
  internalProtection String     @unique
  description        String?
  createdBy          User       @relation("pipelineInternalProtectionCreatedBy", fields: [createdById], references: [id])
  createdById        String
  createdAt          DateTime   @default(now())
  updatedBy          User       @relation("pipelineInternalProtectionUpdatedBy", fields: [updatedById], references: [id])
  updatedById        String
  updatedAt          DateTime   @updatedAt
}

model PipelinesOnPipelines {
  upstream     Pipeline @relation("upstream", fields: [upstreamId], references: [id])
  upstreamId   String
  downstream   Pipeline @relation("downstream", fields: [downstreamId], references: [id])
  downstreamId String
  createdBy    User     @relation("pipelinesOnPipelinesCreatedBy", fields: [createdById], references: [id])
  createdById  String
  createdAt    DateTime @default(now())
  updatedBy    User     @relation("pipelinesOnPipelinesUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String
  updatedAt    DateTime @updatedAt

  @@id([upstreamId, downstreamId])
}

model LicenseChange {
  id                  String                 @id @default(uuid())
  pipeline            Pipeline               @relation(fields: [pipelineId], references: [id])
  pipelineId          String
  status              LicenseChangeStatus    @relation(fields: [statusId], references: [id])
  statusId            String
  substance           LicenseChangeSubstance @relation(fields: [substanceId], references: [id])
  substanceId         String
  date                DateTime
  comment             String?
  linkToDocumentation String?
  createdBy           User                   @relation("licenseChangeCreatedBy", fields: [createdById], references: [id])
  createdById         String
  createdAt           DateTime               @default(now())
  updatedBy           User                   @relation("licenseChangeUpdatedBy", fields: [updatedById], references: [id])
  updatedById         String
  updatedAt           DateTime               @updatedAt

  @@unique([pipelineId, date])
}

model LicenseChangeStatus {
  id             String          @id @default(uuid())
  licenseChanges LicenseChange[]
  status         String          @unique
  description    String?
  createdBy      User            @relation("licenseChangeStatusCreatedBy", fields: [createdById], references: [id])
  createdById    String
  createdAt      DateTime        @default(now())
  updatedBy      User            @relation("licenseChangeStatusUpdatedBy", fields: [updatedById], references: [id])
  updatedById    String
  updatedAt      DateTime        @updatedAt
}

model LicenseChangeSubstance {
  id             String          @id @default(uuid())
  licenseChanges LicenseChange[]
  substance      String          @unique
  description    String?
  createdBy      User            @relation("licenseChangeSubstanceCreatedBy", fields: [createdById], references: [id])
  createdById    String
  createdAt      DateTime        @default(now())
  updatedBy      User            @relation("licenseChangeSubstanceUpdatedBy", fields: [updatedById], references: [id])
  updatedById    String
  updatedAt      DateTime        @updatedAt
}

model PigRun {
  id                          String             @id @default(uuid())
  pipeline                    Pipeline           @relation(fields: [pipelineId], references: [id])
  pipelineId                  String
  pigType                     PigType?           @relation(fields: [pigTypeId], references: [id])
  pigTypeId                   String?
  dateIn                      DateTime
  dateOut                     DateTime?
  isolationValveFunctionTest  PigInspectionEnum?
  pigSenderReceiverInspection PigInspectionEnum?
  comment                     String?
  operator                    User?              @relation("pigRunOperator", fields: [operatorId], references: [id])
  operatorId                  String?
  createdBy                   User               @relation("pigRunCreatedBy", fields: [createdById], references: [id])
  createdById                 String
  createdAt                   DateTime           @default(now())
  updatedBy                   User               @relation("pigRunUpdatedBy", fields: [updatedById], references: [id])
  updatedById                 String
  updatedAt                   DateTime           @updatedAt
}

model PigType {
  id          String   @id @default(uuid())
  pigRuns     PigRun[]
  type        String   @unique
  description String?
  createdBy   User     @relation("pigTypeCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedBy   User     @relation("pigTypeUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedAt   DateTime @updatedAt
}

model PressureTest {
  id                       String            @id @default(uuid())
  pipeline                 Pipeline          @relation(fields: [pipelineId], references: [id])
  pipelineId               String
  pressureTestDate         DateTime
  limitingSpec             LimitingSpecEnum?
  infoSentOutDate          DateTime?
  ddsDate                  DateTime?
  pressureTestReceivedDate DateTime?
  integritySheetUpdated    DateTime?
  comment                  String?
  createdBy                User              @relation("pressureTestCreatedBy", fields: [createdById], references: [id])
  createdById              String
  createdAt                DateTime          @default(now())
  updatedBy                User              @relation("pressureTestUpdatedBy", fields: [updatedById], references: [id])
  updatedById              String
  updatedAt                DateTime          @updatedAt

  // calculated fields
  requiredWTForMop               Float?
  mopTestPressure                Float?
  maxPressureOfLimitingSpec      Float?
  pressureTestPressure           Float?
  requiredWTForTestPressure      Float?
  pressureTestCorrosionAllowance Float?
  waterForPigging                Float?
}

model Risk {
  pipeline                            Pipeline                    @relation(fields: [id], references: [id])
  id                                  String                      @id
  aerialReview                        Boolean?
  environmentProximityTo              EnvironmentProximityToEnum?
  geotechnicalSlopeAngleS1            Int?
  geotechnicalFacingS1                GeotechnicalFacingEnum?
  geotechnicalHeightS1                Int?
  geotechnicalSlopeAngleS2            Int?
  geotechnicalFacingS2                GeotechnicalFacingEnum?
  geotechnicalHeightS2                Int?
  dateSlopeChecked                    DateTime?
  repairTimeDays                      Int?
  releaseTimeDays                     Int?
  oilReleaseCost                      Float?
  gasReleaseCost                      Float?
  consequencePeople                   Int?
  probabilityGeo                      Int?
  safeguardInternalProtection         Int?
  safeguardExternalCoating            Int?
  comment                             String?
  createdBy                           User                        @relation("riskCreatedBy", fields: [createdById], references: [id])
  createdById                         String
  createdAt                           DateTime                    @default(now())
  updatedBy                           User                        @relation("riskUpdatedBy", fields: [updatedById], references: [id])
  updatedById                         String
  updatedAt                           DateTime                    @updatedAt
  // Below are calculated fields.
  // Normaly we wouldn't have to define them in schema as we could just calculate them inside resolvers.
  // But because we want to easily be able to search pipelines by risk potential, we want to store calculated values inside database.
  costPerM3Released                   Float?
  consequenceEnviro                   Int?
  consequenceAsset                    Int?
  consequenceMax                      Int?
  probabilityInterior                 Int?
  probabilityExterior                 Int?
  riskPotentialGeo                    Int?
  riskPotentialInternal               Int?
  riskPotentialExternal               Int?
  safeguardPigging                    Int?
  safeguardChemicalInhibition         Int?
  probabilityInteriorWithSafeguards   Int?
  riskPotentialInternalWithSafeguards Int?
  safeguardCathodic                   Int?
  probabilityExteriorWithSafeguards   Int?
  riskPotentialExternalWithSafeguards Int?
}

model Chemical {
  pipeline                  Pipeline          @relation(fields: [id], references: [id])
  id                        String            @id
  chemicalSupplier          ChemicalSupplier? @relation(fields: [chemicalSupplierId], references: [id])
  chemicalSupplierId        String?
  baselineFluidAnalysisDate DateTime?
  scaling                   Boolean?
  bacteria                  Boolean?
  co2                       Boolean?
  o2                        Boolean?
  h2s                       Boolean?
  continuousInjection       Boolean?
  injectionRate             Float?
  downholeBatch             Boolean?
  inhibitorPipelineBatch    Boolean?
  bacteriaTreatment         Boolean?
  scaleTreatment            Boolean?
  batchFrequency            Int?
  comment                   String?
  createdBy                 User              @relation("chemicalCreatedBy", fields: [createdById], references: [id])
  createdById               String
  createdAt                 DateTime          @default(now())
  updatedBy                 User              @relation("chemicalUpdatedBy", fields: [updatedById], references: [id])
  updatedById               String
  updatedAt                 DateTime          @updatedAt
}

model ChemicalSupplier {
  id          String     @id @default(uuid())
  chemicals   Chemical[]
  name        String     @unique
  description String?
  createdBy   User       @relation("chemicalSupplierCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime   @default(now())
  updatedBy   User       @relation("chemicalSupplierUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedAt   DateTime   @updatedAt
}

model Well {
  id              String      @id @default(uuid())
  name            String      @unique
  oil             Float
  water           Float
  gas             Float
  firstProduction DateTime?
  lastProduction  DateTime?
  firstInjection  DateTime?
  lastInjection   DateTime?
  fdcRecId        String?     @unique
  pipeline        Pipeline?   @relation(fields: [pipelineId], references: [id])
  pipelineId      String?
  wellBatches     WellBatch[]
  createdBy       User        @relation("wellCreatedBy", fields: [createdById], references: [id])
  createdById     String
  createdAt       DateTime    @default(now())
  updatedBy       User        @relation("wellUpdatedBy", fields: [updatedById], references: [id])
  updatedById     String
  updatedAt       DateTime    @updatedAt
}

model SalesPoint {
  id              String    @id @default(uuid())
  name            String    @unique
  oil             Float
  water           Float
  gas             Float
  firstProduction DateTime?
  lastProduction  DateTime?
  firstInjection  DateTime?
  lastInjection   DateTime?
  fdcRecId        String?   @unique
  pipeline        Pipeline? @relation(fields: [pipelineId], references: [id])
  pipelineId      String?
  createdBy       User      @relation("salesPointCreatedBy", fields: [createdById], references: [id])
  createdById     String
  createdAt       DateTime  @default(now())
  updatedBy       User      @relation("salesPointUpdatedBy", fields: [updatedById], references: [id])
  updatedById     String
  updatedAt       DateTime  @updatedAt
}

model PipelineBatch {
  id             String       @id @default(uuid())
  pipeline       Pipeline     @relation(fields: [pipelineId], references: [id])
  pipelineId     String
  date           DateTime
  product        BatchProduct @relation(fields: [productId], references: [id])
  productId      String
  cost           Float?
  chemicalVolume Float?
  diluentVolume  Float?
  comment        String?
  createdBy      User         @relation("pipelineBatchCreatedBy", fields: [createdById], references: [id])
  createdById    String
  createdAt      DateTime     @default(now())
  updatedBy      User         @relation("pipelineBatchUpdatedBy", fields: [updatedById], references: [id])
  updatedById    String
  updatedAt      DateTime     @updatedAt
}

model WellBatch {
  id             String       @id @default(uuid())
  well           Well         @relation(fields: [wellId], references: [id])
  wellId         String
  date           DateTime
  product        BatchProduct @relation(fields: [productId], references: [id])
  productId      String
  cost           Float?
  chemicalVolume Float?
  diluentVolume  Float?
  comment        String?
  createdBy      User         @relation("wellBatchCreatedBy", fields: [createdById], references: [id])
  createdById    String
  createdAt      DateTime     @default(now())
  updatedBy      User         @relation("wellBatchUpdatedBy", fields: [updatedById], references: [id])
  updatedById    String
  updatedAt      DateTime     @updatedAt
}

model BatchProduct {
  id              String          @id @default(uuid())
  pipelineBatches PipelineBatch[]
  wellBatches     WellBatch[]
  product         String          @unique
  productType     String?
  cost            Float?
  solubility      SolubilityEnum
  createdBy       User            @relation("batchProductCreatedBy", fields: [createdById], references: [id])
  createdById     String
  createdAt       DateTime        @default(now())
  updatedBy       User            @relation("batchProductUpdatedBy", fields: [updatedById], references: [id])
  updatedById     String
  updatedAt       DateTime        @updatedAt
}

enum SolubilityEnum {
  Oil
  Water

  @@map("solubility")
}

enum FlowCalculationDirectionEnum {
  Upstream
  Downstream

  @@map("flow_calculation_direction")
}

enum PigInspectionEnum {
  Good
  Failed

  @@map("pig_inspection")
}

enum LimitingSpecEnum {
  ANSI150 @map("ANSI 150")
  ANSI300 @map("ANSI 300")
  ANSI600 @map("ANSI 600")

  @@map("limiting_spec")
}

enum EnvironmentProximityToEnum {
  WB1
  WB3
  WB4
  WB5
  WC1
  WC2
  WC3
  WC4

  @@map("environment_proximity_to")
}

enum GeotechnicalFacingEnum {
  N
  NE
  E
  SE
  S
  SW
  W
  NW

  @@map("geotechnical_facing")
}
