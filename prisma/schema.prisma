generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String           @id @default(uuid())
  email                    String           @unique
  password                 String
  firstName                String
  lastName                 String
  role                     UserRoleEnum     @default(USER)
  facilitiesCreatedBy      Facility[]       @relation("facilityCreatedBy")
  facilitiesUpdatedBy      Facility[]       @relation("facilityUpdatedBy")
  satellitesCreatedBy      Satellite[]      @relation("satelliteCreatedBy")
  satellitesUpdatedBy      Satellite[]      @relation("satelliteUpdatedBy")
  pipelinesCreatedBy       Pipeline[]       @relation("pipelineCreatedBy")
  pipelinesUpdatedBy       Pipeline[]       @relation("pipelineUpdatedBy")
  licenseChangesCreatedBy  LicenseChange[]  @relation("licenseChangeCreatedBy")
  licenseChangesUpdatedBy  LicenseChange[]  @relation("licenseChangeUpdatedBy")
  injectionPointsCreatedBy InjectionPoint[] @relation("injectionPointCreatedBy")
  injectionPointsUpdatedBy InjectionPoint[] @relation("injectionPointUpdatedBy")
  pigRunsOperator          PigRun[]         @relation("pigRunOperator")
  pigRunsCreatedBy         PigRun[]         @relation("pigRunCreatedBy")
  pigRunsUpdatedBy         PigRun[]         @relation("pigRunUpdatedBy")
  pressureTestsCreatedBy   PressureTest[]   @relation("pressureTestCreatedBy")
  pressureTestsUpdatedBy   PressureTest[]   @relation("pressureTestUpdatedBy")
  risksCreatedBy           Risk[]           @relation("riskCreatedBy")
  risksUpdatedBy           Risk[]           @relation("riskUpdatedBy")
}

enum UserRoleEnum {
  USER        @map("User")
  ADMIN       @map("Admin")
  CONTRACTOR  @map("Contractor")

  @@map("user_role")
}

model Facility {
  id          String      @id @default(uuid())
  name        String      @unique
  satellites  Satellite[]
  createdBy   User        @relation("facilityCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime    @default(now())
  updatedBy   User        @relation("facilityUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedAt   DateTime    @updatedAt

}

model Satellite {
  id          String     @id @default(uuid())
  name        String     @unique
  facility    Facility?  @relation(fields: [facilityId], references: [id])
  facilityId  String?
  pipelines   Pipeline[]
  createdBy   User       @relation("satelliteCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime   @default(now())
  updatedBy   User       @relation("satelliteUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedAt   DateTime   @updatedAt

}

model Pipeline {
  id                       String                       @id @default(uuid())
  satellite                Satellite?                   @relation(fields: [satelliteId], references: [id])
  satelliteId              String?
  pigRuns                  PigRun[]
  injectionPoints          InjectionPoint[]
  risk                     Risk?
  license                  String
  segment                  String
  from                     String
  fromFeature              FromToFeatureEnum?
  to                       String
  toFeature                FromToFeatureEnum?
  licenseChanges           LicenseChange[]
  licenseDate              DateTime?
  length                   Float
  type                     TypeEnum?
  grade                    GradeEnum?
  yieldStrength            Int?
  outsideDiameter          Float?
  wallThickness            Float?
  material                 MaterialEnum?
  mop                      Int?
  internalProtection       InternalProtectionEnum?
  piggable                 Boolean?
  piggingFrequency         Int?
  flowCalculationDirection FlowCalculationDirectionEnum
  upstream                 Pipeline[]                   @relation("PipelineFollows", references: [id])
  downstream               Pipeline[]                   @relation("PipelineFollows", references: [id])
  pressureTests            PressureTest[]
  createdBy                User                         @relation("pipelineCreatedBy", fields: [createdById], references: [id])
  createdById              String
  createdAt                DateTime                     @default(now())
  updatedBy                User                         @relation("pipelineUpdatedBy", fields: [updatedById], references: [id])
  updatedById              String
  updatedAt                DateTime                     @updatedAt

  @@unique([license, segment])
}

model LicenseChange {
  id                  String        @id @default(uuid())
  pipeline            Pipeline      @relation(fields: [pipelineId], references: [id])
  pipelineId          String
  status              StatusEnum    @default(Operating)
  substance           SubstanceEnum @default(OilWellEffluent)
  date                DateTime
  linkToDocumentation String?
  createdBy           User          @relation("licenseChangeCreatedBy", fields: [createdById], references: [id])
  createdById         String
  createdAt           DateTime      @default(now())
  updatedBy           User          @relation("licenseChangeUpdatedBy", fields: [updatedById], references: [id])
  updatedById         String
  updatedAt           DateTime      @updatedAt

  @@unique([pipelineId, date])
}

model PigRun {
  id                          String             @id @default(uuid())
  pipeline                    Pipeline           @relation(fields: [pipelineId], references: [id])
  pipelineId                  String
  pigType                     PigTypeEnum?
  dateIn                      DateTime
  dateOut                     DateTime?
  isolationValveFunctionTest  PigInspectionEnum?
  pigSenderReceiverInspection PigInspectionEnum?
  comment                     String?
  operator                    User?              @relation("pigRunOperator", fields: [operatorId], references: [id])
  operatorId                  String?
  createdBy                   User               @relation("pigRunCreatedBy", fields: [createdById], references: [id])
  createdById                 String
  createdAt                   DateTime           @default(now())
  updatedBy                   User               @relation("pigRunUpdatedBy", fields: [updatedById], references: [id])
  updatedById                 String
  updatedAt                   DateTime           @updatedAt
}

model PressureTest {
  id                       String            @id @default(uuid())
  pipeline                 Pipeline          @relation(fields: [pipelineId], references: [id])
  pipelineId               String
  limitingSpec             LimitingSpecEnum?
  infoSentOutDate          DateTime?
  ddsDate                  DateTime?
  pressureTestDate         DateTime?
  pressureTestReceivedDate DateTime?
  integritySheetUpdated    DateTime?
  comment                  String?
  createdBy                User              @relation("pressureTestCreatedBy", fields: [createdById], references: [id])
  createdById              String
  createdAt                DateTime          @default(now())
  updatedBy                User              @relation("pressureTestUpdatedBy", fields: [updatedById], references: [id])
  updatedById              String
  updatedAt                DateTime          @updatedAt
}

model Risk {
  pipeline                    Pipeline                    @relation(fields: [id], references: [id])
  id                          String                      @id
  arielReview                 Boolean?
  environmentProximityTo      EnvironmentProximityToEnum?
  geotechnicalSlopeAngleS1    Int?
  geotechnicalFacingS1        GeotechnicalFacingEnum?
  geotechnicalHeightS1        Int?
  geotechnicalSlopeAngleS2    Int?
  geotechnicalFacingS2        GeotechnicalFacingEnum?
  geotechnicalHeightS2        Int?
  dateSlopeChecked            DateTime?
  repairTimeDays              Int?
  releaseTimeDays             Int?
  oilReleaseCost              Float?
  gasReleaseCost              Float?
  riskPeople                  Int?
  probabilityGeo              Float?
  safeguardInternalProtection Boolean?
  safeguardExternalCoating    Boolean?
  createdBy                   User                        @relation("riskCreatedBy", fields: [createdById], references: [id])
  createdById                 String
  createdAt                   DateTime                    @default(now())
  updatedBy                   User                        @relation("riskUpdatedBy", fields: [updatedById], references: [id])
  updatedById                 String
  updatedAt                   DateTime                    @updatedAt
}

model InjectionPoint {
  id              String    @id @default(uuid())
  source          String    @unique
  oil             Float
  water           Float
  gas             Float
  firstProduction DateTime?
  lastProduction  DateTime?
  firstInjection  DateTime?
  lastInjection   DateTime?
  pvNodeId        String?   @unique
  pipeline        Pipeline? @relation(fields: [pipelineId], references: [id])
  pipelineId      String?
  createdBy       User      @relation("injectionPointCreatedBy", fields: [createdById], references: [id])
  createdById     String
  createdAt       DateTime  @default(now())
  updatedBy       User      @relation("injectionPointUpdatedBy", fields: [updatedById], references: [id])
  updatedById     String
  updatedAt       DateTime  @updatedAt

}

enum SubstanceEnum {
  NaturalGas       @map("Natural Gas")
  FreshWater       @map("Fresh Water")
  SaltWater        @map("Salt Water")
  CrudeOil         @map("Crude Oil")
  OilWellEffluent  @map("Oil Well Effluent")
  LVPProducts      @map("LVP Products")
  FuelGas          @map("Fuel Gas")
  SourNaturalGas   @map("Sour Natural Gas")

  @@map("substance")
}

enum FromToFeatureEnum {
  BlindEnd               @map("Blind end")
  Battery
  Pipeline
  Satellite
  StorageTank            @map("Storage tank")
  InjectionPlant         @map("Injection plant")
  Well
  CompressorStation      @map("Compressor station")
  MeterStation           @map("Meter station")
  PumpStation            @map("Pump station")
  GasProcessingPlant     @map("Gas processing plant")
  UndergroundCapOrTieIn  @map("Underground cap or tie-in")
  Header

  @@map("from_to_feature")
}

enum StatusEnum {
  Operating
  Discontinued
  Abandoned
  Removed
  ToBeConstructed  @map("To Be Constructed")
  Active
  Cancelled
  New
  NotConstructed   @map("Not Constructed")

  @@map("status")
}

enum TypeEnum {
  Type515      @map("515")
  Type2306     @map("2306")
  Type3406     @map("3406")
  Type3408     @map("3408")
  Type6063     @map("6063")
  Type6351     @map("6351")
  Type5A       @map("5A")
  Type5L       @map("5L")
  Type5LX      @map("5LX")
  TypeA106     @map("A106")
  TypeA120     @map("A120")
  TypeA53      @map("A53")
  TypeAMERON   @map("AMERON")
  TypeB515     @map("B515")
  TypeB51S     @map("B51S")
  TypeB5IS     @map("B5IS")
  TypeCENTRON  @map("CENTRON")
  TypeCIBA     @map("CIBA")
  TypeFSLP     @map("FSLP")
  TypeREDTHR   @map("REDTHR")
  TypeSMITH    @map("SMITH")
  TypeSTAR     @map("STAR")
  TypeTBS      @map("TBS")
  TypeWSLP     @map("WSLP")
  TypeZ2451    @map("Z245.1")
  TypeZ2453    @map("Z245.3")

  @@map("type")
}

enum GradeEnum {
  GradeA     @map("A")
  Grade3592  @map("3592")
  GradeB     @map("B")
  GradeX42   @map("X42")
  GradeBW1   @map("BW1")
  Grade2500  @map("2500")
  Grade3591  @map("3591")
  Grade2901  @map("2901")
  GradeT4    @map("T4")
  Grade300   @map("300")
  Grade3593  @map("3593")
  Grade11    @map("11")
  GradeJ55   @map("J55")
  Grade2250  @map("2250")
  GradeX52   @map("X52")
  Grade2750  @map("2750")
  Grade2902  @map("2902")
  Grade25    @map("25")
  Grade241   @map("241")
  Grade2413  @map("2413")
  Grade2411  @map("2411")
  Grade155   @map("155")
  Grade150   @map("150")
  Grade1000  @map("1000")
  Grade800   @map("800")
  GradeT1A   @map("T1A")
  Grade2010  @map("2010")
  GradeT4A   @map("T4A")
  Grade1250  @map("1250")
  Grade17    @map("17")
  Grade900   @map("900")
  GradeT1B   @map("T1B")
  Grade810   @map("810")
  Grade35    @map("35")
  Grade5     @map("5")
  Grade9     @map("9")
  Grade200   @map("200")
  Grade1200  @map("1200")
  Grade1103  @map("11.03")

  @@map("grade")
}

enum MaterialEnum {
  Steel
  PolyvinylChloride         @map("Polyvinyl Chloride")
  Composite
  Fiberglass
  Aluminum
  Polyethylene
  CelluloseAcetateButyrate  @map("Cellulose Acetate Butyrate")
  Unknown
  AsbestosCement            @map("Asbestos Cement")

  @@map("material")
}

enum InternalProtectionEnum {
  Uncoated
  FreeStandingSlipLined  @map("Free Standing (Slip Lined)")
  Unknown
  Cement
  ExpandedPolyethylene   @map("Expanded Polyethylene")
  ThinFilm               @map("Thin Film")

  @@map("internal_protection")
}

enum FlowCalculationDirectionEnum {
  Upstream
  Downstream

  @@map("flow_calculation_direction")
}

enum PigTypeEnum {
  Scrapper                 @map("Scrapper")
  PigType4inArgus          @map("4in Argus")
  PigType6inArgus          @map("6in Argus")
  ScraperP400              @map("Scraper P400")
  PigType3inPurpleScraper  @map("3in Purple Scraper")
  ScraperP304              @map("Scraper P304")
  PigType3inscapper        @map("3inscapper")
  PigType3inscrapper       @map("3inscrapper")
  PigType3inscraper        @map("3in scraper")
  Foam                     @map("Foam")
  RedStubby                @map("Red Stubby")
  PigType3inGSCR           @map("3in GSCR")
  PigType2inGSCR           @map("2in GSCR")
  NoSender                 @map("No Sender")
  PigType2ingscr           @map("2ing scr")
  PigType2inGSCR_GFP       @map("2in GSCR/GFP")
  PigType4inGSCR           @map("4in GSCR")
  PigType2inPSCR_FLM       @map("2in PSCR/FLM")
  PigType3inPSCR           @map("3in PSCR")
  Highline                 @map("High line")
  PigType2inPSCR           @map("2in PSCR")
  PigType3_scrapper        @map("3:scrapper")
  ScraperP401              @map("Scraper P401")
  ScraperP300              @map("Scraper P300")
  ScraperP301              @map("Scraper P301")
  ScraperP309              @map("Scraper P309")
  ScraperP314              @map("Scraper P314")
  ScaperP314               @map("Scaper P314")
  ScaperPP309              @map("Scaper PP309")
  ScraperP204              @map("Scraper P204")
  ScraperP208              @map("Scraper P208")
  PigType3inArgus          @map("3in Argus")
  Ball                     @map("Ball")
  REVERSEFLOWDUETOTAQA     @map("REVERSE FLOW DUE TO TAQA")
  PigType3                 @map("3")
  SIMAY2018                @map("SI MAY 2018")
  ScraperP206              @map("Scraper P206")
  ScraperP200              @map("Scraper P200")
  PigType3inRscr           @map("3in R scr")
  PigType3inPurpleStubby   @map("3in Purple Stubby")
  PigType3inSCRAPER        @map("3in SCRAPER")
  Red3inscraper            @map("Red 3in scraper")
  PigType3inGreenDisc      @map("3in Green Disc")
  PigType4inGreenDisc      @map("4in Green Disc")
  PigType4green2disc       @map("4green 2 disc")
  PigType4gree2disc        @map("4 gree 2 disc")
  PigType3ingreendisc      @map("3in green disc")
  PigType3inpurpledisc     @map("3in purple disc")
  PigType2inPurpleDisc     @map("2in Purple Disc")
  disc                     @map("disc")
  PigType2purple2disc      @map("2 purple 2 disc")
  Shutin                   @map("Shut in")
  PigType3inpurple2disc    @map("3in purple 2 disc")
  PigType2green2disc       @map("2 green 2 disc")
  bullet                   @map("bullet")
  PigType8inFoam           @map("8in Foam")
  PigType3inscr            @map("3in scr")
  ScraperP305              @map("Scraper P305")
  ScraperP312              @map("Scraper P312")
  ScraperP303              @map("Scraper P303")
  ScraperP311              @map("Scraper P311")
  ScrapperP307             @map("Scrapper P307")
  PigType4inpurplescraper  @map("4in  purple scraper")
  Torpedo                  @map("Torpedo")
  PigType3BrownRibbed      @map("#3 Brown Ribbed")
  PigType3GreenRibbed      @map("#3 Green Ribbed")
  PigType3inBlueRibbed     @map("3in Blue Ribbed")
  PigType3inGreenRibbed    @map("3in Green Ribbed")
  PigType3BlueRibbed       @map("#3 Blue Ribbed")
  BlueRibbed               @map("Blue Ribbed")
  M_D_Foamy                @map("M.D. Foamy")
  PigType6inGreenRibbed    @map("6in Green Ribbed")
  SI_GOINGTOTAQA           @map("SI - GOING TO TAQA")
  Red4inscraper            @map("Red 4in scraper")
  Blue3inscraper           @map("Blue 3in scraper")
  PigType3inARGUS          @map("3inARGUS")
  PigType4inBlueDisc       @map("4inBlue Disc")
  PigType8inBlackDisc      @map("8in Black Disc")
  PigType4inGreendisc      @map("4in Green disc")
  PigType6inGreenDisc      @map("6in Green Disc")
  PigType6inscrapper       @map("6in scrapper")
  PigType4inscrapper       @map("4inscrapper")
  PigType4inFoam           @map("4in Foam")
  PigType3inredscrape      @map("3in red scrape")
  GSCR                     @map("GSCR")
  PigType3inStubby         @map("3in Stubby")
  PigType4_GreenRibbed     @map("4: Green Ribbed")
  PigType3inbluescraper    @map("3in blue scraper")
  PigType6ingreenscraper   @map("6in green scraper")
  Purple3inDisc            @map("Purple 3in Disc")
  PigType3inGscr           @map("3in G scr")

  @@map("pig_type")
}

enum PigInspectionEnum {
  Good
  Failed

  @@map("pig_inspection")
}

enum LimitingSpecEnum {
  ANSI150  @map("ANSI 150")
  ANSI300  @map("ANSI 300")
  ANSI600  @map("ANSI 600")

  @@map("limiting_spec")
}

enum EnvironmentProximityToEnum {
  WB1
  WB3
  WB4
  WB5
  WC1
  WC2
  WC3
  WC4

  @@map("environment_proximity_to")
}

enum GeotechnicalFacingEnum {
  N
  NE
  E
  SE
  S
  SW
  W
  NW

  @@map("geotechnical_facing")
}
