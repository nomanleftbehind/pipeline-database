generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "linux-musl"] // "linux-musl" is necessary for Prisma to work in Docker
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String                 @id @default(uuid())
  email                         String                 @unique
  password                      String
  firstName                     String
  lastName                      String
  role                          UserRoleEnum           @default(OPERATOR)
  facilityCreatedBy             Facility[]             @relation("facilityCreatedBy")
  facilityUpdatedBy             Facility[]             @relation("facilityUpdatedBy")
  satelliteCreatedBy            Satellite[]            @relation("satelliteCreatedBy")
  satelliteUpdatedBy            Satellite[]            @relation("satelliteUpdatedBy")
  pipelineCreatedBy             Pipeline[]             @relation("pipelineCreatedBy")
  pipelineUpdatedBy             Pipeline[]             @relation("pipelineUpdatedBy")
  pipelineTypeCreatedBy         PipelineType[]         @relation("pipelineTypeCreatedBy")
  pipelineTypeUpdatedBy         PipelineType[]         @relation("pipelineTypeUpdatedBy")
  gradeCreatedBy                Grade[]                @relation("gradeCreatedBy")
  gradeUpdatedBy                Grade[]                @relation("gradeUpdatedBy")
  fromToFeatureCreatedBy        FromToFeature[]        @relation("fromToFeatureCreatedBy")
  fromToFeatureUpdatedBy        FromToFeature[]        @relation("fromToFeatureUpdatedBy")
  materialCreatedBy             Material[]             @relation("materialCreatedBy")
  materialUpdatedBy             Material[]             @relation("materialUpdatedBy")
  internalProtectionCreatedBy   InternalProtection[]   @relation("internalProtectionCreatedBy")
  internalProtectionUpdatedBy   InternalProtection[]   @relation("internalProtectionUpdatedBy")
  pipelinesOnPipelinesCreatedBy PipelinesOnPipelines[] @relation("pipelinesOnPipelinesCreatedBy")
  pipelinesOnPipelinesUpdatedBy PipelinesOnPipelines[] @relation("pipelinesOnPipelinesUpdatedBy")
  licenseChangeCreatedBy        LicenseChange[]        @relation("licenseChangeCreatedBy")
  licenseChangeUpdatedBy        LicenseChange[]        @relation("licenseChangeUpdatedBy")
  statusCreatedBy               Status[]               @relation("statusCreatedBy")
  statusUpdatedBy               Status[]               @relation("statusUpdatedBy")
  substanceCreatedBy            Substance[]            @relation("substanceCreatedBy")
  substanceUpdatedBy            Substance[]            @relation("substanceUpdatedBy")
  wellCreatedBy                 Well[]                 @relation("wellCreatedBy")
  wellUpdatedBy                 Well[]                 @relation("wellUpdatedBy")
  salesPointsCreatedBy          SalesPoint[]           @relation("salesPointCreatedBy")
  salesPointsUpdatedBy          SalesPoint[]           @relation("salesPointUpdatedBy")
  pigRunOperator                PigRun[]               @relation("pigRunOperator")
  pigRunCreatedBy               PigRun[]               @relation("pigRunCreatedBy")
  pigRunUpdatedBy               PigRun[]               @relation("pigRunUpdatedBy")
  pressureTestCreatedBy         PressureTest[]         @relation("pressureTestCreatedBy")
  pressureTestUpdatedBy         PressureTest[]         @relation("pressureTestUpdatedBy")
  pipelineBatchCreatedBy        PipelineBatch[]        @relation("pipelineBatchCreatedBy")
  pipelineBatchUpdatedBy        PipelineBatch[]        @relation("pipelineBatchUpdatedBy")
  wellBatchCreatedBy            WellBatch[]            @relation("wellBatchCreatedBy")
  wellBatchUpdatedBy            WellBatch[]            @relation("wellBatchUpdatedBy")
  batchProductCreatedBy         BatchProduct[]         @relation("batchProductCreatedBy")
  batchProductUpdatedBy         BatchProduct[]         @relation("batchProductUpdatedBy")
  pigTypeCreatedBy              PigType[]              @relation("pigTypeCreatedBy")
  pigTypeUpdatedBy              PigType[]              @relation("pigTypeUpdatedBy")
  cathodicSurveyCreatedBy       CathodicSurvey[]       @relation("cathodicSurveyCreatedBy")
  cathodicSurveyUpdatedBy       CathodicSurvey[]       @relation("cathodicSurveyUpdatedBy")
  companyCreatedBy              Company[]              @relation("companyCreatedBy")
  companyUpdatedBy              Company[]              @relation("companyUpdatedBy")
  riskCreatedBy                 Risk[]                 @relation("riskCreatedBy")
  riskUpdatedBy                 Risk[]                 @relation("riskUpdatedBy")
  geotechnicalCreatedBy         Geotechnical[]         @relation("geotechnicalCreatedBy")
  geotechnicalUpdatedBy         Geotechnical[]         @relation("geotechnicalUpdatedBy")
  riskEnvironmentCreatedBy      RiskEnvironment[]      @relation("riskEnvironmentCreatedBy")
  riskEnvironmentUpdatedBy      RiskEnvironment[]      @relation("riskEnvironmentUpdatedBy")
  chemicalCreatedBy             Chemical[]             @relation("chemicalCreatedBy")
  chemicalUpdatedBy             Chemical[]             @relation("chemicalUpdatedBy")
  chemicalSupplierCreatedBy     ChemicalSupplier[]     @relation("chemicalSupplierCreatedBy")
  chemicalSupplierUpdatedBy     ChemicalSupplier[]     @relation("chemicalSupplierUpdatedBy")
}

enum UserRoleEnum {
  ADMIN      @map("Admin")
  ENGINEER   @map("Engineer")
  REGULATORY @map("Regulatory")
  OFFICE     @map("Office")
  OPERATOR   @map("Operator")
  CHEMICAL   @map("Chemical")
  CATHODIC   @map("Cathodic")
  CONTRACTOR @map("Contractor")

  @@map("user_role")
}

model Facility {
  id          String      @id @default(uuid())
  name        String      @unique
  satellites  Satellite[]
  createdBy   User        @relation("facilityCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime    @default(now())
  updatedBy   User        @relation("facilityUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedAt   DateTime    @updatedAt
}

model Satellite {
  id          String     @id @default(uuid())
  name        String     @unique
  facility    Facility?  @relation(fields: [facilityId], references: [id])
  facilityId  String?
  pipelines   Pipeline[]
  createdBy   User       @relation("satelliteCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime   @default(now())
  updatedBy   User       @relation("satelliteUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedAt   DateTime   @updatedAt
}

model Pipeline {
  id                       String                       @id @default(uuid())
  satellite                Satellite?                   @relation(fields: [satelliteId], references: [id])
  satelliteId              String?
  license                  String
  segment                  String
  flowCalculationDirection FlowCalculationDirectionEnum
  piggable                 Boolean?
  piggingFrequency         Int?
  comment                  String?
  risk                     Risk?
  chemical                 Chemical?
  licenseChanges           LicenseChange[]
  pigRuns                  PigRun[]
  pressureTests            PressureTest[]
  pipelineBatches          PipelineBatch[]
  geotechnicals            Geotechnical[]
  cathodicSurveys          CathodicSurvey[]
  wells                    Well[]
  salesPoints              SalesPoint[]
  upstream                 PipelinesOnPipelines[]       @relation("upstream")
  downstream               PipelinesOnPipelines[]       @relation("downstream")
  createdBy                User                         @relation("pipelineCreatedBy", fields: [createdById], references: [id])
  createdById              String
  createdAt                DateTime                     @default(now())
  updatedBy                User                         @relation("pipelineUpdatedBy", fields: [updatedById], references: [id])
  updatedById              String
  updatedAt                DateTime                     @updatedAt

  @@unique([license, segment])
}

model PipelineType {
  id          String          @id @default(uuid())
  pipelines   LicenseChange[]
  type        String          @unique
  description String?
  createdBy   User            @relation("pipelineTypeCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime        @default(now())
  updatedBy   User            @relation("pipelineTypeUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedAt   DateTime        @updatedAt
}

model Grade {
  id          String          @id @default(uuid())
  pipelines   LicenseChange[]
  grade       String          @unique
  description String?
  createdBy   User            @relation("gradeCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime        @default(now())
  updatedBy   User            @relation("gradeUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedAt   DateTime        @updatedAt
}

model FromToFeature {
  id                   String          @id @default(uuid())
  pipelinesFromFeature LicenseChange[] @relation("fromFeature")
  pipelinesToFeature   LicenseChange[] @relation("toFeature")
  feature              String          @unique
  description          String?
  createdBy            User            @relation("fromToFeatureCreatedBy", fields: [createdById], references: [id])
  createdById          String
  createdAt            DateTime        @default(now())
  updatedBy            User            @relation("fromToFeatureUpdatedBy", fields: [updatedById], references: [id])
  updatedById          String
  updatedAt            DateTime        @updatedAt
}

model Material {
  id          String          @id @default(uuid())
  pipelines   LicenseChange[]
  material    String          @unique
  description String?
  createdBy   User            @relation("materialCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime        @default(now())
  updatedBy   User            @relation("materialUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedAt   DateTime        @updatedAt
}

model InternalProtection {
  id                 String          @id @default(uuid())
  pipelines          LicenseChange[]
  internalProtection String          @unique
  description        String?
  createdBy          User            @relation("internalProtectionCreatedBy", fields: [createdById], references: [id])
  createdById        String
  createdAt          DateTime        @default(now())
  updatedBy          User            @relation("internalProtectionUpdatedBy", fields: [updatedById], references: [id])
  updatedById        String
  updatedAt          DateTime        @updatedAt
}

model PipelinesOnPipelines {
  upstream     Pipeline @relation("upstream", fields: [upstreamId], references: [id])
  upstreamId   String
  downstream   Pipeline @relation("downstream", fields: [downstreamId], references: [id])
  downstreamId String
  createdBy    User     @relation("pipelinesOnPipelinesCreatedBy", fields: [createdById], references: [id])
  createdById  String
  createdAt    DateTime @default(now())
  updatedBy    User     @relation("pipelinesOnPipelinesUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String
  updatedAt    DateTime @updatedAt

  @@id([upstreamId, downstreamId])
}

model LicenseChange {
  id                   String              @id @default(uuid())
  pipeline             Pipeline            @relation(fields: [pipelineId], references: [id])
  pipelineId           String
  date                 DateTime
  status               Status              @relation(fields: [statusId], references: [id])
  statusId             String
  substance            Substance           @relation(fields: [substanceId], references: [id])
  substanceId          String
  from                 String
  fromFeature          FromToFeature?      @relation("fromFeature", fields: [fromFeatureId], references: [id])
  fromFeatureId        String?
  to                   String
  toFeature            FromToFeature?      @relation("toFeature", fields: [toFeatureId], references: [id])
  toFeatureId          String?
  length               Float
  pipelineType         PipelineType?       @relation(fields: [pipelineTypeId], references: [id])
  pipelineTypeId       String?
  grade                Grade?              @relation(fields: [gradeId], references: [id])
  gradeId              String?
  yieldStrength        Int?
  outsideDiameter      Float?
  wallThickness        Float?
  material             Material?           @relation(fields: [materialId], references: [id])
  materialId           String?
  mop                  Int?
  internalProtection   InternalProtection? @relation(fields: [internalProtectionId], references: [id])
  internalProtectionId String?
  comment              String?
  linkToDocumentation  String?
  createdBy            User                @relation("licenseChangeCreatedBy", fields: [createdById], references: [id])
  createdById          String
  createdAt            DateTime            @default(now())
  updatedBy            User                @relation("licenseChangeUpdatedBy", fields: [updatedById], references: [id])
  updatedById          String
  updatedAt            DateTime            @updatedAt

  @@unique([pipelineId, date])
}

model Status {
  id             String          @id @default(uuid())
  licenseChanges LicenseChange[]
  status         String          @unique
  description    String?
  createdBy      User            @relation("statusCreatedBy", fields: [createdById], references: [id])
  createdById    String
  createdAt      DateTime        @default(now())
  updatedBy      User            @relation("statusUpdatedBy", fields: [updatedById], references: [id])
  updatedById    String
  updatedAt      DateTime        @updatedAt
}

model Substance {
  id             String          @id @default(uuid())
  licenseChanges LicenseChange[]
  substance      String          @unique
  description    String?
  createdBy      User            @relation("substanceCreatedBy", fields: [createdById], references: [id])
  createdById    String
  createdAt      DateTime        @default(now())
  updatedBy      User            @relation("substanceUpdatedBy", fields: [updatedById], references: [id])
  updatedById    String
  updatedAt      DateTime        @updatedAt
}

model CathodicSurvey {
  id             String    @id @default(uuid())
  pipeline       Pipeline  @relation(fields: [pipelineId], references: [id])
  pipelineId     String
  date           DateTime
  company        Company?  @relation(fields: [companyId], references: [id])
  companyId      String?
  deficiencies   Boolean?
  correctionDate DateTime?
  comment        String?
  createdBy      User      @relation("cathodicSurveyCreatedBy", fields: [createdById], references: [id])
  createdById    String
  createdAt      DateTime  @default(now())
  updatedBy      User      @relation("cathodicSurveyUpdatedBy", fields: [updatedById], references: [id])
  updatedById    String
  updatedAt      DateTime  @updatedAt

  @@unique([pipelineId, date])
}

model Company {
  id              String           @id @default(uuid())
  cathodicSurveys CathodicSurvey[]
  name            String           @unique
  description     String?
  createdBy       User             @relation("companyCreatedBy", fields: [createdById], references: [id])
  createdById     String
  createdAt       DateTime         @default(now())
  updatedBy       User             @relation("companyUpdatedBy", fields: [updatedById], references: [id])
  updatedById     String
  updatedAt       DateTime         @updatedAt
}

model PigRun {
  id                          String             @id @default(uuid())
  pipeline                    Pipeline           @relation(fields: [pipelineId], references: [id])
  pipelineId                  String
  pigType                     PigType?           @relation(fields: [pigTypeId], references: [id])
  pigTypeId                   String?
  dateIn                      DateTime
  dateOut                     DateTime?
  isolationValveFunctionTest  PigInspectionEnum?
  pigSenderReceiverInspection PigInspectionEnum?
  comment                     String?
  operator                    User?              @relation("pigRunOperator", fields: [operatorId], references: [id])
  operatorId                  String?
  createdBy                   User               @relation("pigRunCreatedBy", fields: [createdById], references: [id])
  createdById                 String
  createdAt                   DateTime           @default(now())
  updatedBy                   User               @relation("pigRunUpdatedBy", fields: [updatedById], references: [id])
  updatedById                 String
  updatedAt                   DateTime           @updatedAt
}

model PigType {
  id          String   @id @default(uuid())
  pigRuns     PigRun[]
  type        String   @unique
  description String?
  createdBy   User     @relation("pigTypeCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedBy   User     @relation("pigTypeUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedAt   DateTime @updatedAt
}

model PressureTest {
  id                       String            @id @default(uuid())
  pipeline                 Pipeline          @relation(fields: [pipelineId], references: [id])
  pipelineId               String
  date                     DateTime
  limitingSpec             LimitingSpecEnum?
  infoSentOutDate          DateTime?
  ddsDate                  DateTime?
  pressureTestReceivedDate DateTime?
  integritySheetUpdated    DateTime?
  comment                  String?
  createdBy                User              @relation("pressureTestCreatedBy", fields: [createdById], references: [id])
  createdById              String
  createdAt                DateTime          @default(now())
  updatedBy                User              @relation("pressureTestUpdatedBy", fields: [updatedById], references: [id])
  updatedById              String
  updatedAt                DateTime          @updatedAt

  // calculated fields
  requiredWTForMop          Float?
  mopTestPressure           Float?
  maxPressureOfLimitingSpec Float?
  testPressure              Float?
  requiredWTForTestPressure Float?
  corrosionAllowance        Float?
  waterForPigging           Float?
}

model Risk {
  pipeline                            Pipeline         @relation(fields: [id], references: [id])
  id                                  String           @id
  aerialReview                        Boolean?
  environment                         RiskEnvironment? @relation(fields: [environmentId], references: [id])
  environmentId                       String?
  repairTimeDays                      Int?
  releaseTimeDays                     Int?
  oilReleaseCost                      Float?
  gasReleaseCost                      Float?
  consequencePeople                   Int?
  probabilityGeo                      Int?
  safeguardInternalProtection         Int?
  safeguardExternalCoating            Int?
  comment                             String?
  createdBy                           User             @relation("riskCreatedBy", fields: [createdById], references: [id])
  createdById                         String
  createdAt                           DateTime         @default(now())
  updatedBy                           User             @relation("riskUpdatedBy", fields: [updatedById], references: [id])
  updatedById                         String
  updatedAt                           DateTime         @updatedAt
  // Below are calculated fields.
  // Normaly we wouldn't have to define them in schema as we could just calculate them inside resolvers.
  // But because we want to easily be able to search pipelines by risk potential, we want to store calculated values inside database.
  costPerM3Released                   Float?
  consequenceEnviro                   Int?
  consequenceAsset                    Int?
  consequenceMax                      Int?
  probabilityInterior                 Int?
  probabilityExterior                 Int?
  riskPotentialGeo                    Int?
  riskPotentialInternal               Int?
  riskPotentialExternal               Int?
  safeguardPigging                    Int?
  safeguardChemicalInhibition         Int?
  probabilityInteriorWithSafeguards   Int?
  riskPotentialInternalWithSafeguards Int?
  safeguardCathodic                   Int?
  probabilityExteriorWithSafeguards   Int?
  riskPotentialExternalWithSafeguards Int?
}

model Geotechnical {
  id               String                  @id @default(uuid())
  pipeline         Pipeline                @relation(fields: [pipelineId], references: [id])
  pipelineId       String
  slopeAngleS1     Int?
  facingS1         GeotechnicalFacingEnum?
  heightS1         Int?
  slopeAngleS2     Int?
  facingS2         GeotechnicalFacingEnum?
  heightS2         Int?
  dateSlopeChecked DateTime?
  comment          String?
  createdBy        User                    @relation("geotechnicalCreatedBy", fields: [createdById], references: [id])
  createdById      String
  createdAt        DateTime                @default(now())
  updatedBy        User                    @relation("geotechnicalUpdatedBy", fields: [updatedById], references: [id])
  updatedById      String
  updatedAt        DateTime                @updatedAt
}

model RiskEnvironment {
  id          String   @id @default(uuid())
  risks       Risk[]
  environment String   @unique
  description String?
  createdBy   User     @relation("riskEnvironmentCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedBy   User     @relation("riskEnvironmentUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedAt   DateTime @updatedAt
}

model Chemical {
  pipeline                  Pipeline          @relation(fields: [id], references: [id])
  id                        String            @id
  chemicalSupplier          ChemicalSupplier? @relation(fields: [chemicalSupplierId], references: [id])
  chemicalSupplierId        String?
  baselineFluidAnalysisDate DateTime?
  scaling                   Boolean?
  bacteria                  Boolean?
  co2                       Boolean?
  o2                        Boolean?
  h2s                       Boolean?
  continuousInjection       Boolean?
  injectionRate             Float?
  downholeBatch             Boolean?
  inhibitorPipelineBatch    Boolean?
  bacteriaTreatment         Boolean?
  scaleTreatment            Boolean?
  batchFrequency            Int?
  comment                   String?
  createdBy                 User              @relation("chemicalCreatedBy", fields: [createdById], references: [id])
  createdById               String
  createdAt                 DateTime          @default(now())
  updatedBy                 User              @relation("chemicalUpdatedBy", fields: [updatedById], references: [id])
  updatedById               String
  updatedAt                 DateTime          @updatedAt
}

model ChemicalSupplier {
  id          String     @id @default(uuid())
  chemicals   Chemical[]
  name        String     @unique
  description String?
  createdBy   User       @relation("chemicalSupplierCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime   @default(now())
  updatedBy   User       @relation("chemicalSupplierUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedAt   DateTime   @updatedAt
}

model Well {
  id              String      @id @default(uuid())
  name            String      @unique
  oil             Float
  water           Float
  gas             Float
  firstProduction DateTime?
  lastProduction  DateTime?
  firstInjection  DateTime?
  lastInjection   DateTime?
  fdcRecId        String?     @unique
  pipeline        Pipeline?   @relation(fields: [pipelineId], references: [id])
  pipelineId      String?
  wellBatches     WellBatch[]
  createdBy       User        @relation("wellCreatedBy", fields: [createdById], references: [id])
  createdById     String
  createdAt       DateTime    @default(now())
  updatedBy       User        @relation("wellUpdatedBy", fields: [updatedById], references: [id])
  updatedById     String
  updatedAt       DateTime    @updatedAt
}

model SalesPoint {
  id              String    @id @default(uuid())
  name            String    @unique
  oil             Float
  water           Float
  gas             Float
  firstProduction DateTime?
  lastProduction  DateTime?
  firstInjection  DateTime?
  lastInjection   DateTime?
  fdcRecId        String?   @unique
  pipeline        Pipeline? @relation(fields: [pipelineId], references: [id])
  pipelineId      String?
  createdBy       User      @relation("salesPointCreatedBy", fields: [createdById], references: [id])
  createdById     String
  createdAt       DateTime  @default(now())
  updatedBy       User      @relation("salesPointUpdatedBy", fields: [updatedById], references: [id])
  updatedById     String
  updatedAt       DateTime  @updatedAt
}

model PipelineBatch {
  id             String       @id @default(uuid())
  pipeline       Pipeline     @relation(fields: [pipelineId], references: [id])
  pipelineId     String
  date           DateTime
  product        BatchProduct @relation(fields: [productId], references: [id])
  productId      String
  cost           Float?
  chemicalVolume Float?
  diluentVolume  Float?
  comment        String?
  createdBy      User         @relation("pipelineBatchCreatedBy", fields: [createdById], references: [id])
  createdById    String
  createdAt      DateTime     @default(now())
  updatedBy      User         @relation("pipelineBatchUpdatedBy", fields: [updatedById], references: [id])
  updatedById    String
  updatedAt      DateTime     @updatedAt
}

model WellBatch {
  id             String       @id @default(uuid())
  well           Well         @relation(fields: [wellId], references: [id])
  wellId         String
  date           DateTime
  product        BatchProduct @relation(fields: [productId], references: [id])
  productId      String
  cost           Float?
  chemicalVolume Float?
  diluentVolume  Float?
  comment        String?
  createdBy      User         @relation("wellBatchCreatedBy", fields: [createdById], references: [id])
  createdById    String
  createdAt      DateTime     @default(now())
  updatedBy      User         @relation("wellBatchUpdatedBy", fields: [updatedById], references: [id])
  updatedById    String
  updatedAt      DateTime     @updatedAt
}

model BatchProduct {
  id              String          @id @default(uuid())
  pipelineBatches PipelineBatch[]
  wellBatches     WellBatch[]
  product         String          @unique
  productType     String?
  cost            Float?
  solubility      SolubilityEnum
  createdBy       User            @relation("batchProductCreatedBy", fields: [createdById], references: [id])
  createdById     String
  createdAt       DateTime        @default(now())
  updatedBy       User            @relation("batchProductUpdatedBy", fields: [updatedById], references: [id])
  updatedById     String
  updatedAt       DateTime        @updatedAt
}

enum SolubilityEnum {
  Oil
  Water

  @@map("solubility")
}

enum FlowCalculationDirectionEnum {
  Upstream
  Downstream

  @@map("flow_calculation_direction")
}

enum PigInspectionEnum {
  Good
  Failed

  @@map("pig_inspection")
}

enum LimitingSpecEnum {
  ANSI150 @map("ANSI 150")
  ANSI300 @map("ANSI 300")
  ANSI600 @map("ANSI 600")

  @@map("limiting_spec")
}

enum GeotechnicalFacingEnum {
  N
  NE
  E
  SE
  S
  SW
  W
  NW

  @@map("geotechnical_facing")
}
