### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  errors: [FieldError]
  token: String
  user: User
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum EnvironmentProximityToEnum {
  WB1
  WB3
  WB4
  WB5
  WC1
  WC2
  WC3
  WC4
}

type EnvironmentProximityToEnumObject {
  WB1: String!
  WB3: String!
  WB4: String!
  WB5: String!
  WC1: String!
  WC2: String!
  WC3: String!
  WC4: String!
}

type Facility {
  createdAt: DateTime!
  createdBy: User!
  id: String!
  name: String!
  satellites: [Satellite]
  updatedAt: DateTime!
  updatedBy: User!
}

input FacilityCreateInput {
  name: String!
  satellites: [SatelliteCreateInput]
}

input FacilityUniqueInput {
  id: String
  name: String
}

type FieldError {
  field: String
  message: String
}

enum FlowCalculationDirectionEnum {
  Downstream
  Upstream
}

type FlowCalculationDirectionEnumObject {
  Downstream: String!
  Upstream: String!
}

enum FromToFeatureEnum {
  Battery
  BlindEnd
  CompressorStation
  GasProcessingPlant
  Header
  InjectionPlant
  MeterStation
  Pipeline
  PumpStation
  Satellite
  StorageTank
  UndergroundCapOrTieIn
  Well
}

type FromToFeatureEnumObject {
  Battery: String!
  BlindEnd: String!
  CompressorStation: String!
  GasProcessingPlant: String!
  Header: String!
  InjectionPlant: String!
  MeterStation: String!
  Pipeline: String!
  PumpStation: String!
  Satellite: String!
  StorageTank: String!
  UndergroundCapOrTieIn: String!
  Well: String!
}

enum GeotechnicalFacingEnum {
  E
  N
  NE
  NW
  S
  SE
  SW
  W
}

type GeotechnicalFacingEnumObject {
  E: String!
  N: String!
  NE: String!
  NW: String!
  S: String!
  SE: String!
  SW: String!
  W: String!
}

enum GradeEnum {
  Grade5
  Grade9
  Grade11
  Grade17
  Grade25
  Grade35
  Grade150
  Grade155
  Grade200
  Grade241
  Grade300
  Grade800
  Grade810
  Grade900
  Grade1000
  Grade1103
  Grade1200
  Grade1250
  Grade2010
  Grade2250
  Grade2411
  Grade2413
  Grade2500
  Grade2750
  Grade2901
  Grade2902
  Grade3591
  Grade3592
  Grade3593
  GradeA
  GradeB
  GradeBW1
  GradeJ55
  GradeT1A
  GradeT1B
  GradeT4
  GradeT4A
  GradeX42
  GradeX52
}

type GradeEnumObject {
  Grade5: String!
  Grade9: String!
  Grade11: String!
  Grade17: String!
  Grade25: String!
  Grade35: String!
  Grade150: String!
  Grade155: String!
  Grade200: String!
  Grade241: String!
  Grade300: String!
  Grade800: String!
  Grade810: String!
  Grade900: String!
  Grade1000: String!
  Grade1103: String!
  Grade1200: String!
  Grade1250: String!
  Grade2010: String!
  Grade2250: String!
  Grade2411: String!
  Grade2413: String!
  Grade2500: String!
  Grade2750: String!
  Grade2901: String!
  Grade2902: String!
  Grade3591: String!
  Grade3592: String!
  Grade3593: String!
  GradeA: String!
  GradeB: String!
  GradeBW1: String!
  GradeJ55: String!
  GradeT1A: String!
  GradeT1B: String!
  GradeT4: String!
  GradeT4A: String!
  GradeX42: String!
  GradeX52: String!
}

type InjectionPoint {
  createdAt: DateTime!
  createdBy: User!
  firstInjection: DateTime
  firstProduction: DateTime
  gas: Float!
  gasAssociatedLiquids: Float!
  id: String!
  lastInjection: DateTime
  lastProduction: DateTime
  oil: Float!
  pipeline: Pipeline
  pvNodeId: String
  source: String!
  totalFluids: Float!
  updatedAt: DateTime!
  updatedBy: User!
  water: Float!
}

input InjectionPointCreateInput {
  firstInjection: DateTime
  firstProduction: DateTime
  gas: Float!
  lastInjection: DateTime
  lastProduction: DateTime
  oil: Float!
  pvNodeId: String
  source: String!
  water: Float!
}

enum InternalProtectionEnum {
  Cement
  ExpandedPolyethylene
  FreeStandingSlipLined
  ThinFilm
  Uncoated
  Unknown
}

type InternalProtectionEnumObject {
  Cement: String!
  ExpandedPolyethylene: String!
  FreeStandingSlipLined: String!
  ThinFilm: String!
  Uncoated: String!
  Unknown: String!
}

type LicenseChange {
  createdAt: DateTime!
  createdBy: User!
  date: DateTime!
  id: String!
  linkToDocumentation: String
  pipeline: Pipeline!
  status: StatusEnum!
  substance: SubstanceEnum!
  updatedAt: DateTime!
  updatedBy: User!
}

enum LimitingSpecEnum {
  ANSI150
  ANSI300
  ANSI600
}

type LimitingSpecEnumObject {
  ANSI150: String!
  ANSI300: String!
  ANSI600: String!
}

enum MaterialEnum {
  Aluminum
  AsbestosCement
  CelluloseAcetateButyrate
  Composite
  Fiberglass
  Polyethylene
  PolyvinylChloride
  Steel
  Unknown
}

type MaterialEnumObject {
  Aluminum: String!
  AsbestosCement: String!
  CelluloseAcetateButyrate: String!
  Composite: String!
  Fiberglass: String!
  Polyethylene: String!
  PolyvinylChloride: String!
  Steel: String!
  Unknown: String!
}

type Mutation {
  addLicenseChange(pipelineId: String!): LicenseChange
  addPigRun(pipelineId: String!): PigRun
  addPressureTest(pipelineId: String!): PressureTest
  addRisk(id: String!): Risk
  connectPipeline(connectPipelineId: String!, flowCalculationDirection: FlowCalculationDirectionEnum!, id: String!): Pipeline
  connectSource(id: String!, sourceId: String!): Pipeline
  createFacility(data: FacilityCreateInput!): Facility
  deleteLicenseChange(id: String!): LicenseChange
  deletePigRun(id: String!): PigRun
  deletePipeline(id: String!): Pipeline
  deletePressureTest(id: String!): PressureTest
  deleteRisk(id: String!): Risk
  deleteSatellite(id: String!): Satellite
  disconnectPipeline(disconnectPipelineId: String!, flowCalculationDirection: FlowCalculationDirectionEnum!, id: String!): Pipeline
  disconnectSource(id: String!, sourceId: String!): Pipeline
  duplicatePipeline(id: String!): Pipeline
  editFacility(id: String!, name: String): Facility
  editInjectionPoint(firstInjection: DateTime, firstProduction: DateTime, gas: Float, id: String!, lastInjection: DateTime, lastProduction: DateTime, oil: Float, pipelineId: String, pvNodeId: String, source: String, water: Float): InjectionPoint
  editLicenseChange(date: DateTime, id: String!, linkToDocumentation: String, pipelineId: String, status: StatusEnum, substance: SubstanceEnum): LicenseChange
  editPigRun(comment: String, dateIn: DateTime, dateOut: DateTime, id: String!, isolationValveFunctionTest: PigInspectionEnum, operatorId: String, pigSenderReceiverInspection: PigInspectionEnum, pigType: PigTypeEnum): PigRun
  editPipeline(flowCalculationDirection: FlowCalculationDirectionEnum, from: String, fromFeature: FromToFeatureEnum, grade: GradeEnum, id: String!, internalProtection: InternalProtectionEnum, length: Float, license: String, licenseDate: DateTime, material: MaterialEnum, mop: Int, outsideDiameter: Float, piggable: Boolean, piggingFrequency: Int, satelliteId: String, segment: String, to: String, toFeature: FromToFeatureEnum, type: TypeEnum, wallThickness: Float, yieldStrength: Int): Pipeline
  editPressureTest(comment: String, ddsDate: DateTime, id: String!, infoSentOutDate: DateTime, integritySheetUpdated: DateTime, limitingSpec: LimitingSpecEnum, pipelineId: String, pressureTestDate: DateTime, pressureTestReceivedDate: DateTime): PressureTest
  editRisk(arielReview: Boolean, dateSlopeChecked: DateTime, environmentProximityTo: EnvironmentProximityToEnum, gasReleaseCost: Float, geotechnicalFacingS1: GeotechnicalFacingEnum, geotechnicalFacingS2: GeotechnicalFacingEnum, geotechnicalHeightS1: Int, geotechnicalHeightS2: Int, geotechnicalSlopeAngleS1: Int, geotechnicalSlopeAngleS2: Int, id: String!, oilReleaseCost: Float, probabilityGeo: Float, releaseTimeDays: Int, repairTimeDays: Int, riskPeople: Int, safeguardExternalCoating: Boolean, safeguardInternalProtection: Boolean): Risk
  editSatellite(facilityUniqueInput: FacilityUniqueInput, id: String!, name: String): Satellite
  login(email: String!, password: String!): AuthPayload
  signup(email: String!, firstName: String!, lastName: String!, password: String!): AuthPayload
}

enum PigInspectionEnum {
  Failed
  Good
}

type PigInspectionEnumObject {
  Failed: String!
  Good: String!
}

type PigRun {
  comment: String
  createdAt: DateTime!
  createdBy: User!
  dateIn: DateTime!
  dateOut: DateTime
  id: String!
  isolationValveFunctionTest: PigInspectionEnum
  operator: User
  pigSenderReceiverInspection: PigInspectionEnum
  pigType: PigTypeEnum
  pipeline: Pipeline!
  updatedAt: DateTime!
  updatedBy: User!
}

enum PigTypeEnum {
  Ball
  Blue3inscraper
  BlueRibbed
  Foam
  GSCR
  Highline
  M_D_Foamy
  NoSender
  PigType2green2disc
  PigType2inGSCR
  PigType2inGSCR_GFP
  PigType2inPSCR
  PigType2inPSCR_FLM
  PigType2inPurpleDisc
  PigType2ingscr
  PigType2purple2disc
  PigType3
  PigType3BlueRibbed
  PigType3BrownRibbed
  PigType3GreenRibbed
  PigType3_scrapper
  PigType3inARGUS
  PigType3inArgus
  PigType3inBlueRibbed
  PigType3inGSCR
  PigType3inGreenDisc
  PigType3inGreenRibbed
  PigType3inGscr
  PigType3inPSCR
  PigType3inPurpleScraper
  PigType3inPurpleStubby
  PigType3inRscr
  PigType3inSCRAPER
  PigType3inStubby
  PigType3inbluescraper
  PigType3ingreendisc
  PigType3inpurple2disc
  PigType3inpurpledisc
  PigType3inredscrape
  PigType3inscapper
  PigType3inscr
  PigType3inscraper
  PigType3inscrapper
  PigType4_GreenRibbed
  PigType4gree2disc
  PigType4green2disc
  PigType4inArgus
  PigType4inBlueDisc
  PigType4inFoam
  PigType4inGSCR
  PigType4inGreenDisc
  PigType4inGreendisc
  PigType4inpurplescraper
  PigType4inscrapper
  PigType6inArgus
  PigType6inGreenDisc
  PigType6inGreenRibbed
  PigType6ingreenscraper
  PigType6inscrapper
  PigType8inBlackDisc
  PigType8inFoam
  Purple3inDisc
  REVERSEFLOWDUETOTAQA
  Red3inscraper
  Red4inscraper
  RedStubby
  SIMAY2018
  SI_GOINGTOTAQA
  ScaperP314
  ScaperPP309
  ScraperP200
  ScraperP204
  ScraperP206
  ScraperP208
  ScraperP300
  ScraperP301
  ScraperP303
  ScraperP304
  ScraperP305
  ScraperP309
  ScraperP311
  ScraperP312
  ScraperP314
  ScraperP400
  ScraperP401
  Scrapper
  ScrapperP307
  Shutin
  Torpedo
  bullet
  disc
}

type PigTypeEnumObject {
  Ball: String!
  Blue3inscraper: String!
  BlueRibbed: String!
  Foam: String!
  GSCR: String!
  Highline: String!
  M_D_Foamy: String!
  NoSender: String!
  PigType2green2disc: String!
  PigType2inGSCR: String!
  PigType2inGSCR_GFP: String!
  PigType2inPSCR: String!
  PigType2inPSCR_FLM: String!
  PigType2inPurpleDisc: String!
  PigType2ingscr: String!
  PigType2purple2disc: String!
  PigType3: String!
  PigType3BlueRibbed: String!
  PigType3BrownRibbed: String!
  PigType3GreenRibbed: String!
  PigType3_scrapper: String!
  PigType3inARGUS: String!
  PigType3inArgus: String!
  PigType3inBlueRibbed: String!
  PigType3inGSCR: String!
  PigType3inGreenDisc: String!
  PigType3inGreenRibbed: String!
  PigType3inGscr: String!
  PigType3inPSCR: String!
  PigType3inPurpleScraper: String!
  PigType3inPurpleStubby: String!
  PigType3inRscr: String!
  PigType3inSCRAPER: String!
  PigType3inStubby: String!
  PigType3inbluescraper: String!
  PigType3ingreendisc: String!
  PigType3inpurple2disc: String!
  PigType3inpurpledisc: String!
  PigType3inredscrape: String!
  PigType3inscapper: String!
  PigType3inscr: String!
  PigType3inscraper: String!
  PigType3inscrapper: String!
  PigType4_GreenRibbed: String!
  PigType4gree2disc: String!
  PigType4green2disc: String!
  PigType4inArgus: String!
  PigType4inBlueDisc: String!
  PigType4inFoam: String!
  PigType4inGSCR: String!
  PigType4inGreenDisc: String!
  PigType4inGreendisc: String!
  PigType4inpurplescraper: String!
  PigType4inscrapper: String!
  PigType6inArgus: String!
  PigType6inGreenDisc: String!
  PigType6inGreenRibbed: String!
  PigType6ingreenscraper: String!
  PigType6inscrapper: String!
  PigType8inBlackDisc: String!
  PigType8inFoam: String!
  Purple3inDisc: String!
  REVERSEFLOWDUETOTAQA: String!
  Red3inscraper: String!
  Red4inscraper: String!
  RedStubby: String!
  SIMAY2018: String!
  SI_GOINGTOTAQA: String!
  ScaperP314: String!
  ScaperPP309: String!
  ScraperP200: String!
  ScraperP204: String!
  ScraperP206: String!
  ScraperP208: String!
  ScraperP300: String!
  ScraperP301: String!
  ScraperP303: String!
  ScraperP304: String!
  ScraperP305: String!
  ScraperP309: String!
  ScraperP311: String!
  ScraperP312: String!
  ScraperP314: String!
  ScraperP400: String!
  ScraperP401: String!
  Scrapper: String!
  ScrapperP307: String!
  Shutin: String!
  Torpedo: String!
  bullet: String!
  disc: String!
}

type Pipeline {
  createdAt: DateTime!
  createdBy: User!
  downstream: [Pipeline]
  flowCalculationDirection: FlowCalculationDirectionEnum!
  from: String!
  fromFeature: FromToFeatureEnum
  grade: GradeEnum
  id: String!
  injectionPoints: [InjectionPoint]
  internalProtection: InternalProtectionEnum
  length: Float!
  license: String!
  licenseChanges: [LicenseChange]
  licenseDate: DateTime
  material: MaterialEnum
  mop: Int
  outsideDiameter: Float
  pigRuns: [PigRun]
  piggable: Boolean
  piggingFrequency: Int
  pressureTests: [PressureTest]
  risk: Risk
  satellite: Satellite
  segment: String!
  status: StatusEnum
  substance: SubstanceEnum
  to: String!
  toFeature: FromToFeatureEnum
  type: TypeEnum
  updatedAt: DateTime!
  updatedBy: User!
  upstream: [Pipeline]
  wallThickness: Float
  yieldStrength: Int
}

input PipelineCreateInput {
  downstream: [PipelineCreateInput]
  from: String!
  fromFeature: FromToFeatureEnum
  grade: GradeEnum
  injectionPoints: [InjectionPointCreateInput]
  internalProtection: InternalProtectionEnum
  length: Float!
  license: String!
  material: MaterialEnum
  mop: Int
  outsideDiameter: Float
  segment: String!
  to: String!
  toFeature: FromToFeatureEnum
  type: TypeEnum
  upstream: [PipelineCreateInput]
  wallThickness: Float
}

type PipelineFlow {
  firstInjection: DateTime
  firstProduction: DateTime
  gas: Float!
  gasAssociatedLiquids: Float!
  id: String!
  lastInjection: DateTime
  lastProduction: DateTime
  oil: Float!
  totalFluids: Float!
  water: Float!
}

type PipelineOptions {
  facility: String!
  id: String!
  license: String!
  satellite: String!
  segment: String!
}

input PipelineUniqueInput {
  id: String
  license: String
  segment: String
}

type PressureTest {
  comment: String
  createdAt: DateTime!
  createdBy: User!
  ddsDate: DateTime
  id: String!
  infoSentOutDate: DateTime
  integritySheetUpdated: DateTime
  limitingSpec: LimitingSpecEnum
  pipeline: Pipeline!
  pressureTestDate: DateTime
  pressureTestReceivedDate: DateTime
  updatedAt: DateTime!
  updatedBy: User!
}

type Query {
  allFacilities: [Facility]
  allInjectionPoints: [InjectionPoint]
  allSatellites: [Satellite]
  allUsers: [User]
  licenseChangesByPipelineId(pipelineId: String): [LicenseChange]
  me: User
  pigRunsByPipelineId(pipelineId: String!): [PigRun]
  pipelineById(id: String!): Pipeline
  pipelineFlow(flowCalculationDirection: FlowCalculationDirectionEnum!, idList: [String]!): [PipelineFlow]
  pipelineOptions: [PipelineOptions]
  pipelinesById(id: String, table: String): [Pipeline]
  pipelinesByUser(userUniqueInput: UserUniqueInput!): [Pipeline]
  pressureTestsByPipelineId(pipelineId: String): [PressureTest]
  riskById(id: String!): Risk
  sideBar: [SideBar]
  sourceOptions: [SourceOptions]
  validators: Validator
}

type Risk {
  arielReview: Boolean
  assetRisk(gas: Float, oil: Float, water: Float): Int
  costPerM3Released(gas: Float, oil: Float, substance: SubstanceEnum, water: Float): Float
  createdAt: DateTime!
  createdBy: User!
  dateSlopeChecked: DateTime
  enviroRisk(gas: Float, oil: Float, status: StatusEnum, substance: SubstanceEnum, water: Float): Int
  environmentProximityTo: EnvironmentProximityToEnum
  gasReleaseCost: Float
  geotechnicalFacingS1: GeotechnicalFacingEnum
  geotechnicalFacingS2: GeotechnicalFacingEnum
  geotechnicalHeightS1: Int
  geotechnicalHeightS2: Int
  geotechnicalSlopeAngleS1: Int
  geotechnicalSlopeAngleS2: Int
  id: String!
  oilReleaseCost: Float
  pipeline: Pipeline!
  probabilityGeo: Float
  probabilityInterior(material: MaterialEnum, status: StatusEnum, substance: SubstanceEnum, type: TypeEnum): Int
  releaseTimeDays: Int
  repairTimeDays: Int
  riskPeople: Int
  safeguardExternalCoating: Boolean
  safeguardInternalProtection: Boolean
  updatedAt: DateTime!
  updatedBy: User!
}

type Satellite {
  createdAt: DateTime!
  createdBy: User!
  facility: Facility
  id: String!
  name: String!
  pipelines: [Pipeline]
  updatedAt: DateTime!
  updatedBy: User!
}

input SatelliteCreateInput {
  injectionPoints: [InjectionPointCreateInput]
  name: String!
  pipelines: [PipelineCreateInput]
}

type SatelliteSideBar {
  id: String!
  name: String!
}

input SatelliteUniqueInput {
  id: String
  name: String
}

type SideBar {
  id: String!
  name: String!
  satellites: [SatelliteSideBar!]!
}

type SourceOptions {
  facility: String!
  id: String!
  satellite: String!
  source: String!
}

enum StatusEnum {
  Abandoned
  Active
  Cancelled
  Discontinued
  New
  NotConstructed
  Operating
  Removed
  ToBeConstructed
}

type StatusEnumObject {
  Abandoned: String!
  Active: String!
  Cancelled: String!
  Discontinued: String!
  New: String!
  NotConstructed: String!
  Operating: String!
  Removed: String!
  ToBeConstructed: String!
}

enum SubstanceEnum {
  CrudeOil
  FreshWater
  FuelGas
  LVPProducts
  NaturalGas
  OilWellEffluent
  SaltWater
  SourNaturalGas
}

type SubstanceEnumObject {
  CrudeOil: String!
  FreshWater: String!
  FuelGas: String!
  LVPProducts: String!
  NaturalGas: String!
  OilWellEffluent: String!
  SaltWater: String!
  SourNaturalGas: String!
}

enum TypeEnum {
  Type5A
  Type5L
  Type5LX
  Type515
  Type2306
  Type3406
  Type3408
  Type6063
  Type6351
  TypeA53
  TypeA106
  TypeA120
  TypeAMERON
  TypeB5IS
  TypeB51S
  TypeB515
  TypeCENTRON
  TypeCIBA
  TypeFSLP
  TypeREDTHR
  TypeSMITH
  TypeSTAR
  TypeTBS
  TypeWSLP
  TypeZ2451
  TypeZ2453
}

type TypeEnumObject {
  Type5A: String!
  Type5L: String!
  Type5LX: String!
  Type515: String!
  Type2306: String!
  Type3406: String!
  Type3408: String!
  Type6063: String!
  Type6351: String!
  TypeA53: String!
  TypeA106: String!
  TypeA120: String!
  TypeAMERON: String!
  TypeB5IS: String!
  TypeB51S: String!
  TypeB515: String!
  TypeCENTRON: String!
  TypeCIBA: String!
  TypeFSLP: String!
  TypeREDTHR: String!
  TypeSMITH: String!
  TypeSTAR: String!
  TypeTBS: String!
  TypeWSLP: String!
  TypeZ2451: String!
  TypeZ2453: String!
}

type User {
  email: String!
  facilitiesCreated: [Facility]
  facilitiesUpdated: [Facility]
  firstName: String!
  id: String!
  injectionPointsCreated: [InjectionPoint]
  injectionPointsUpdated: [InjectionPoint]
  lastName: String!
  licenseChangesCreated: [LicenseChange]
  licenseChangesUpdated: [LicenseChange]
  pipelinesCreated: [Pipeline]
  pipelinesUpdated: [Pipeline]
  risksCreated: [Risk]
  risksUpdated: [Risk]
  role: UserRoleEnum!
  satellitesCreated: [Satellite]
  satellitesUpdated: [Satellite]
}

input UserCreateInput {
  email: String!
  facilities: [FacilityCreateInput]
  firstName: String!
  injectionPoints: [InjectionPointCreateInput]
  lastName: String!
  pipelines: [PipelineCreateInput]
  satellites: [SatelliteCreateInput]
}

enum UserRoleEnum {
  ADMIN
  CONTRACTOR
  USER
}

type UserRoleEnumObject {
  ADMIN: String!
  CONTRACTOR: String!
  USER: String!
}

input UserUniqueInput {
  email: String
  id: String
}

type Validator {
  anyTextMatchPattern: String!
  environmentProximityToEnum: EnvironmentProximityToEnumObject!
  flowCalculationDirectionEnum: FlowCalculationDirectionEnumObject!
  fromToFeatureEnum: FromToFeatureEnumObject!
  fromToMatchPattern: String!
  geotechnicalFacingEnum: GeotechnicalFacingEnumObject!
  gradeEnum: GradeEnumObject!
  internalProtectionEnum: InternalProtectionEnumObject!
  lengthMatchPattern: String!
  licenseMatchPattern: String!
  limitingSpecEnum: LimitingSpecEnumObject!
  materialEnum: MaterialEnumObject!
  mopMatchPattern: String!
  outsideDiameterMatchPattern: String!
  pigInspectionEnum: PigInspectionEnumObject!
  pigTypeEnum: PigTypeEnumObject!
  segmentMatchPattern: String!
  statusEnum: StatusEnumObject!
  substanceEnum: SubstanceEnumObject!
  typeEnum: TypeEnumObject!
  userRoleEnum: UserRoleEnumObject!
  wallThicknessMatchPattern: String!
  yieldStrengthMatchPattern: String!
}
