### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AllocationInput {
  userId: String!
}

type AllocationPayload {
  error: FieldError
  success: FieldError
}

type AllocationProgressObject {
  numberOfItems: Int!
  progress: Int!
  userId: String!
}

type AuthPayload {
  error: FieldError
  user: User
}

type BatchProduct {
  cost: Float
  createdAt: DateTime!
  createdBy: User!
  id: String!
  pipelineBatches: [PipelineBatch]
  product: String!
  productType: String
  solubility: SolubilityEnum!
  updatedAt: DateTime!
  updatedBy: User!
  wellBatches: [WellBatch]
}

type CathodicSurvey {
  authorized: Boolean!
  comment: String
  company: Company
  companyId: String
  correctionDate: DateTime
  createdAt: DateTime!
  createdBy: User!
  createdById: String!
  date: DateTime!
  deficiencies: Boolean
  id: String!
  pipeline: Pipeline!
  updatedAt: DateTime!
  updatedBy: User!
  updatedById: String!
}

type CathodicSurveyPayload {
  cathodicSurvey: CathodicSurvey
  error: FieldError
}

input ChangePasswordInput {
  confirmPassword: String!
  password: String!
  token: String!
}

type Chemical {
  authorized: Boolean!
  bacteria: Boolean
  bacteriaTreatment: Boolean
  baselineFluidAnalysisDate: DateTime
  batchFrequency: Int
  chemicalSupplier: ChemicalSupplier
  chemicalSupplierId: String
  co2: Boolean
  comment: String
  continuousInjection: Boolean
  createdAt: DateTime!
  createdBy: User!
  createdById: String!
  downholeBatch: Boolean
  h2s: Boolean
  id: String!
  inhibitorPipelineBatch: Boolean
  injectionRate: Float
  o2: Boolean
  pipeline: Pipeline!
  scaleTreatment: Boolean
  scaling: Boolean
  updatedAt: DateTime!
  updatedBy: User!
  updatedById: String!
}

type ChemicalPayload {
  chemical: Chemical
  error: FieldError
}

type ChemicalSupplier {
  authorized: Boolean!
  chemicals: [Chemical]
  createdAt: DateTime!
  createdBy: User!
  description: String
  id: String!
  name: String!
  updatedAt: DateTime!
  updatedBy: User!
}

type Company {
  authorized: Boolean!
  cathodicSurveys: [CathodicSurvey]
  createdAt: DateTime!
  createdBy: User!
  description: String
  id: String!
  name: String!
  updatedAt: DateTime!
  updatedBy: User!
}

input ConnectWellInput {
  flowCalculationDirection: FlowCalculationDirectionEnum!
  id: String!
  pipelineId: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DisconnectWellInput {
  id: String!

  """
  Pass this object if well is being explicitly disconnected from pipeline, as opposed to implicitly by connecting the well to another pipeline
  """
  pipelineInfo: DisconnectWellOptionalInput
}

input DisconnectWellOptionalInput {
  flowCalculationDirection: FlowCalculationDirectionEnum!
  pipelineId: String!
}

input EditCathodicSurveyInput {
  comment: String
  companyId: String
  correctionDate: DateTime
  date: DateTime
  deficiencies: Boolean
  id: String!
}

input EditGeotechnicalInput {
  comment: String
  dateSlopeChecked: DateTime
  facingS1: GeotechnicalFacingEnum
  facingS2: GeotechnicalFacingEnum
  heightS1: Int
  heightS2: Int
  id: String!
  slopeAngleS1: Int
  slopeAngleS2: Int
}

input EditLicenseChangeInput {
  comment: String
  date: DateTime
  from: String
  fromFeatureId: String
  gradeId: String
  id: String!
  internalProtectionId: String
  length: Float
  linkToDocumentation: String
  materialId: String
  mop: Int
  outsideDiameter: Float
  pipelineTypeId: String
  statusId: String
  substanceId: String
  to: String
  toFeatureId: String
  wallThickness: Float
  yieldStrength: Int
}

input EditPipelineBatchInput {
  chemicalVolume: Float
  comment: String
  cost: Float
  date: DateTime
  diluentVolume: Float
  id: String!
  productId: String
}

input EditPipelineInput {
  comment: String
  flowCalculationDirection: FlowCalculationDirectionEnum
  id: String!
  license: String
  piggable: Boolean
  piggingFrequency: Int
  satelliteId: String
  segment: String
}

input EditPressureTestInput {
  comment: String
  date: DateTime
  ddsDate: DateTime
  id: String!
  infoSentOutDate: DateTime
  integritySheetUpdated: DateTime
  limitingSpec: LimitingSpecEnum
  pressureTestReceivedDate: DateTime
}

input EditRiskInput {
  aerialReview: Boolean
  comment: String
  consequencePeople: Int
  environmentId: String
  gasReleaseCost: Float
  id: String!
  oilReleaseCost: Float
  probabilityGeo: Int
  releaseTimeDays: Int
  repairTimeDays: Int
  safeguardExternalCoating: Int
  safeguardInternalProtection: Int
}

input EditWellBatchInput {
  chemicalVolume: Float
  comment: String
  cost: Float
  date: DateTime
  diluentVolume: Float
  id: String!
  productId: String
}

input EditWellInput {
  fdcRecId: String
  firstInjection: DateTime
  firstProduction: DateTime
  gas: Float
  id: String!
  lastInjection: DateTime
  lastProduction: DateTime
  name: String
  oil: Float
  pipelineId: String
  water: Float
}

type EnumObject {
  databaseEnum: String!
  serverEnum: String!
}

type Facility {
  createdAt: DateTime!
  createdBy: User!
  id: String!
  name: String!
  satellites: [Satellite]
  updatedAt: DateTime!
  updatedBy: User!
}

input FacilityCreateInput {
  name: String!
  satellites: [SatelliteCreateInput]
}

input FacilityUniqueInput {
  id: String
  name: String
}

type FieldError {
  field: String!
  message: String!
}

enum FlowCalculationDirectionEnum {
  Downstream
  Upstream
}

type Geotechnical {
  authorized: Boolean!
  comment: String
  createdAt: DateTime!
  createdBy: User!
  createdById: String!
  dateSlopeChecked: DateTime
  facingS1: GeotechnicalFacingEnum
  facingS2: GeotechnicalFacingEnum
  heightS1: Int
  heightS2: Int
  id: String!
  pipeline: Pipeline!
  slopeAngleS1: Int
  slopeAngleS2: Int
  updatedAt: DateTime!
  updatedBy: User!
  updatedById: String!
}

enum GeotechnicalFacingEnum {
  E
  N
  NE
  NW
  S
  SE
  SW
  W
}

type GeotechnicalPayload {
  error: FieldError
  geotechnical: Geotechnical
}

enum HavingEnum {
  any
  count
  first
  last
  maximum
  minimum
}

input HierarchyInput {
  id: String!
  table: TableEnum!
}

type LicenseChange {
  authorized: Boolean!
  comment: String
  createdAt: DateTime!
  createdBy: User!
  createdById: String!
  date: DateTime!
  from: String!
  fromFeatureId: String
  gradeId: String
  id: String!
  internalProtectionId: String
  length: Float!
  linkToDocumentation: String
  materialId: String
  mop: Int
  outsideDiameter: Float
  pipeline: Pipeline!
  pipelineTypeId: String
  statusId: String!
  substanceId: String!
  to: String!
  toFeatureId: String
  updatedAt: DateTime!
  updatedBy: User!
  updatedById: String!
  wallThickness: Float
  yieldStrength: Int
}

type LicenseChangePayload {
  error: FieldError
  licenseChange: LicenseChange
}

enum LimitingSpecEnum {
  ANSI150
  ANSI300
  ANSI600
}

type Mutation {
  addCathodicSurvey(pipelineId: String!): CathodicSurveyPayload
  addChemical(id: String!): ChemicalPayload
  addGeotechnical(pipelineId: String!): GeotechnicalPayload
  addLicenseChange(pipelineId: String!): LicenseChangePayload
  addPigRun(pipelineId: String!): PigRunPayload
  addPipelineBatch(pipelineId: String!): PipelineBatchPayload
  addPressureTest(pipelineId: String!): PressureTestPayload
  addRisk(id: String!): RiskPayload
  addWellBatch(wellId: String!): WellBatchPayload
  allocateChronologicalEdge: AllocationPayload
  allocatePipelineFlow: AllocationPayload
  allocatePressureTest: AllocationPayload
  allocateRisk: AllocationPayload
  allocateWellFlow: AllocationPayload
  changePassword(changePasswordInput: ChangePasswordInput!): AuthPayload!
  connectPipeline(connectNewPipelineId: String!, connectedPipelineId: String, flowCalculationDirection: FlowCalculationDirectionEnum!, pipelineId: String!): PipelinesOnPipelinesPayload
  connectSalesPoint(id: String!, pipelineId: String!): SalesPointPayload
  connectWell(data: ConnectWellInput!): WellPayload
  createFacility(data: FacilityCreateInput!): Facility
  deleteCathodicSurvey(id: String!): CathodicSurveyPayload
  deleteChemical(id: String!): ChemicalPayload
  deleteGeotechnical(id: String!): GeotechnicalPayload
  deleteLicenseChange(id: String!): LicenseChangePayload
  deletePigRun(id: String!): PigRunPayload
  deletePipeline(id: String!): PipelinePayload
  deletePipelineBatch(id: String!): PipelineBatchPayload
  deletePressureTest(id: String!): PressureTestPayload
  deleteRisk(id: String!): RiskPayload
  deleteSatellite(id: String!): Satellite
  deleteWellBatch(id: String!): WellBatchPayload
  disconnectPipeline(disconnectPipelineId: String!, flowCalculationDirection: FlowCalculationDirectionEnum!, pipelineId: String!): PipelinesOnPipelinesPayload
  disconnectSalesPoint(id: String!): SalesPointPayload
  disconnectWell(data: DisconnectWellInput!): WellPayload
  duplicatePipeline(id: String!): PipelinePayload
  editCathodicSurvey(data: EditCathodicSurveyInput!): CathodicSurveyPayload
  editChemical(bacteria: Boolean, bacteriaTreatment: Boolean, baselineFluidAnalysisDate: DateTime, batchFrequency: Int, chemicalSupplierId: String, co2: Boolean, comment: String, continuousInjection: Boolean, downholeBatch: Boolean, h2s: Boolean, id: String!, inhibitorPipelineBatch: Boolean, injectionRate: Float, o2: Boolean, scaleTreatment: Boolean, scaling: Boolean): ChemicalPayload
  editFacility(id: String!, name: String): Facility
  editGeotechnical(data: EditGeotechnicalInput!): GeotechnicalPayload
  editLicenseChange(data: EditLicenseChangeInput!): LicenseChangePayload
  editPigRun(comment: String, dateIn: DateTime, dateOut: DateTime, id: String!, isolationValveFunctionTest: PigInspectionEnum, operatorId: String, pigSenderReceiverInspection: PigInspectionEnum, pigTypeId: String): PigRunPayload
  editPipeline(data: EditPipelineInput!): PipelinePayload
  editPipelineBatch(data: EditPipelineBatchInput!): PipelineBatchPayload
  editPressureTest(data: EditPressureTestInput!): PressureTestPayload
  editRisk(data: EditRiskInput!): RiskPayload
  editSalesPoint(fdcRecId: String, firstInjection: DateTime, firstProduction: DateTime, gas: Float, id: String!, lastInjection: DateTime, lastProduction: DateTime, name: String, oil: Float, pipelineId: String, water: Float): SalesPointPayload
  editSatellite(facilityUniqueInput: FacilityUniqueInput, id: String!, name: String): Satellite
  editWell(data: EditWellInput!): WellPayload
  editWellBatch(data: EditWellBatchInput!): WellBatchPayload
  forgotPassword(email: String!): Boolean!
  login(email: String!, password: String!): AuthPayload!
  logout: Boolean!
  signup(userRegisterInput: UserRegisterInput!): AuthPayload!
  testAllocate(flowCalculationDirection: FlowCalculationDirectionEnum!, id: String!): String
}

input NavigationInput {
  hierarchy: HierarchyInput
  search: [SearchNavigationInput!]
}

enum OperationEnum {
  contains
  endsWith
  equals
  greaterThan
  greaterThanOrEqual
  lessThan
  lessThanOrEqual
  not
  startsWith
}

enum PigInspectionEnum {
  Failed
  Good
}

type PigRun {
  authorized: Boolean!
  comment: String
  createdAt: DateTime!
  createdBy: User!
  createdById: String!
  dateIn: DateTime!
  dateOut: DateTime
  id: String!
  isolationValveFunctionTest: PigInspectionEnum
  operator: User
  operatorId: String
  pigSenderReceiverInspection: PigInspectionEnum
  pigTypeId: String
  pipeline: Pipeline!
  updatedAt: DateTime!
  updatedBy: User!
  updatedById: String!
}

type PigRunPayload {
  error: FieldError
  pigRun: PigRun
}

type Pipeline {
  authorized: Boolean!
  comment: String
  createdAt: DateTime!
  createdBy: User!
  createdById: String!
  currentFrom: String
  currentFromFeature: String
  currentStatus: String
  currentSubstance: String
  currentTo: String
  currentToFeature: String
  downstream: [Pipeline]
  firstInjection: DateTime
  firstLicenseDate: DateTime
  firstProduction: DateTime
  flowCalculationDirection: FlowCalculationDirectionEnum!
  gas: Float!
  gasAssociatedLiquids: Float!
  id: String!
  lastInjection: DateTime
  lastProduction: DateTime
  license: String!
  licenseChanges: [LicenseChange]
  oil: Float!
  pigRuns: [PigRun]
  piggable: Boolean
  piggingFrequency: Int
  pressureTests: [PressureTest]
  risk: Risk
  salesPoints: [SalesPoint]
  satellite: Satellite
  satelliteId: String
  segment: String!
  totalFluids: Float!
  updatedAt: DateTime!
  updatedBy: User!
  updatedById: String!
  upstream: [Pipeline]
  water: Float!
  wells: [Well]
}

type PipelineBatch {
  authorized: Boolean!
  chemicalVolume: Float
  comment: String
  cost: Float
  createdAt: DateTime!
  createdBy: User!
  createdById: String!
  date: DateTime!
  diluentVolume: Float
  id: String!
  pipeline: Pipeline!
  product: BatchProduct!
  productId: String!
  updatedAt: DateTime!
  updatedBy: User!
  updatedById: String!
}

type PipelineBatchPayload {
  error: FieldError
  pipelineBatch: PipelineBatch
}

input PipelineCreateInput {
  downstream: [PipelineCreateInput]
  from: String!
  length: Float!
  license: String!
  mop: Int
  outsideDiameter: Float
  segment: String!
  to: String!
  upstream: [PipelineCreateInput]
  wallThickness: Float
  wells: [WellCreateInput]
}

type PipelineFlow {
  authorized: Boolean!
  createdAt: DateTime!
  createdBy: User!
  firstInjection: DateTime
  firstProduction: DateTime
  gas: Float!
  gasAssociatedLiquids: Float!
  id: String!
  lastInjection: DateTime
  lastProduction: DateTime

  """
  This field is a concatenated license and segment of a pipeline to conform with Well and Sales Point objects
  """
  name: String!
  oil: Float!
  totalFluids: Float!
  updatedAt: DateTime!
  updatedBy: User!
  water: Float!
}

type PipelinePayload {
  error: FieldError
  pipeline: Pipeline
}

type PipelinesByIdPayload {
  count: Int!
  pipelines: [Pipeline]
}

type PipelinesFlowAndSourceGroupBy {
  pipelinesFlow: [PipelineFlow]
  sourceGroupBy: SourceGroupBy
}

type PipelinesOnPipelines {
  authorized: Boolean!
  createdAt: DateTime!
  createdBy: User!
  downstream: Pipeline!
  downstreamId: String!
  updatedAt: DateTime!
  updatedBy: User!
  upstream: Pipeline!
  upstreamId: String!
}

type PipelinesOnPipelinesPayload {
  error: FieldError
  pipelinesOnPipelines: PipelinesOnPipelines
}

type PressureTest {
  authorized: Boolean!
  comment: String
  createdAt: DateTime!
  createdBy: User!
  createdById: String!
  date: DateTime!
  ddsDate: DateTime
  id: String!
  infoSentOutDate: DateTime
  integritySheetUpdated: DateTime
  limitingSpec: LimitingSpecEnum
  maxPressureOfLimitingSpec: Float
  mopTestPressure: Float
  pipeline: Pipeline!
  pressureTestCorrosionAllowance: Float
  pressureTestPressure: Float
  pressureTestReceivedDate: DateTime
  requiredWTForMop: Float
  requiredWTForTestPressure: Float
  updatedAt: DateTime!
  updatedBy: User!
  updatedById: String!
  waterForPigging: Float
}

type PressureTestPayload {
  error: FieldError
  pressureTest: PressureTest
}

type Query {
  allFacilities: [Facility]
  allSatellites: [Satellite]
  allUsers: [User]
  cathodicSurveysByPipelineId(pipelineId: String!): [CathodicSurvey]
  chemicalById(id: String!): Chemical
  connectedPipelinesByPipelineId(flowCalculationDirection: FlowCalculationDirectionEnum!, id: String!): PipelinesFlowAndSourceGroupBy
  geotechnicalsByPipelineId(pipelineId: String!): [Geotechnical]
  licenseChangesByPipelineId(pipelineId: String!): [LicenseChange]
  me: User
  pigRunsByPipelineId(pipelineId: String!): [PigRun]
  pipelineBatchesByPipelineId(pipelineId: String!): [PipelineBatch]
  pipelineFlow(flowCalculationDirection: FlowCalculationDirectionEnum!, id: String!): PipelineFlow
  pipelineId(id: String!): Pipeline
  pipelineOptions(id: String!): [SourceOptions]
  pipelinesById(navigationInput: NavigationInput!, skip: Int!, take: Int!): PipelinesByIdPayload!
  pipelinesByUser(userUniqueInput: UserUniqueInput!): [Pipeline]
  pipelinesFlow(flowCalculationDirection: FlowCalculationDirectionEnum!, idList: [String]!): [PipelineFlow]
  pipelinesOnPipelinesByDownstreamId(downstreamId: String!): [PipelinesOnPipelines]
  pipelinesOnPipelinesByUpstreamId(upstreamId: String!): [PipelinesOnPipelines]
  pressureTestsByPipelineId(pipelineId: String!): [PressureTest]
  riskById(id: String!): Risk
  salesPointOptions(pipelineId: String!): [SourceOptions]
  salesPointsByPipelineId(pipelineId: String!): [SalesPoint]
  salesPointsGroupByPipelineId(pipelineId: String!): SourceGroupBy
  searchNavigationOptions: [SearchNavigationObject!]!
  sideBar: [SideBar]
  userCount: Int
  validators: ValidatorsUserRole
  validatorsPipeline: ValidatorsPipeline
  wellBatchesByWellId(wellId: String!): [WellBatch]
  wellOptions(pipelineId: String!): [SourceOptions]
  wellsByPipelineId(pipelineId: String!): [Well]
  wellsGroupByPipelineId(pipelineId: String!): SourceGroupBy
}

type Risk {
  aerialReview: Boolean
  authorized: Boolean!
  comment: String
  consequenceAsset: Int
  consequenceEnviro: Int
  consequenceMax: Int
  consequencePeople: Int
  costPerM3Released: Float
  createdAt: DateTime!
  createdBy: User!
  createdById: String!
  environmentId: String
  gasReleaseCost: Float
  id: String!
  oilReleaseCost: Float
  pipeline: Pipeline!
  probabilityExterior: Int
  probabilityExteriorWithSafeguards: Int
  probabilityGeo: Int
  probabilityInterior: Int
  probabilityInteriorWithSafeguards: Int
  releaseTimeDays: Int
  repairTimeDays: Int
  riskPotentialExternal: Int
  riskPotentialExternalWithSafeguards: Int
  riskPotentialGeo: Int
  riskPotentialInternal: Int
  riskPotentialInternalWithSafeguards: Int
  safeguardCathodic: Int
  safeguardChemicalInhibition: Int
  safeguardExternalCoating: Int
  safeguardInternalProtection: Int
  safeguardPigging: Int
  updatedAt: DateTime!
  updatedBy: User!
  updatedById: String!
}

type RiskPayload {
  error: FieldError
  risk: Risk
}

type SalesPoint {
  authorized: Boolean!
  createdAt: DateTime!
  createdBy: User!
  createdById: String!
  fdcRecId: String
  firstInjection: DateTime
  firstProduction: DateTime
  gas: Float!
  gasAssociatedLiquids: Float!
  id: String!
  lastInjection: DateTime
  lastProduction: DateTime
  name: String!
  oil: Float!
  pipeline: Pipeline
  totalFluids: Float!
  updatedAt: DateTime!
  updatedBy: User!
  updatedById: String!
  water: Float!
}

input SalesPointCreateInput {
  fdcRecId: String
  firstInjection: DateTime
  firstProduction: DateTime
  gas: Float!
  lastInjection: DateTime
  lastProduction: DateTime
  name: String!
  oil: Float!
  water: Float!
}

type SalesPointPayload {
  error: FieldError
  salesPoint: SalesPoint
}

type Satellite {
  createdAt: DateTime!
  createdBy: User!
  facility: Facility
  id: String!
  name: String!
  pipelines: [Pipeline]
  updatedAt: DateTime!
  updatedBy: User!
}

input SatelliteCreateInput {
  injectionPoints: [WellCreateInput]
  name: String!
  pipelines: [PipelineCreateInput]
}

type SatelliteSideBar {
  id: String!
  name: String!
}

input SatelliteUniqueInput {
  id: String
  name: String
}

input SearchNavigationInput {
  field: String!
  having: HavingEnum!
  operation: OperationEnum!
  table: TableEnum!
  type: String!
  value: String!
}

type SearchNavigationObject {
  enumObjectArray: [EnumObject!]
  field: String!
  nullable: Boolean!
  table: TableEnum!
  type: String!
}

type SideBar {
  id: String!
  name: String!
  satellites: [SatelliteSideBar!]!
}

enum SolubilityEnum {
  Oil
  Water
}

type SourceGroupBy {
  firstInjection: DateTime
  firstProduction: DateTime
  gas: Float
  gasAssociatedLiquids: Float
  lastInjection: DateTime
  lastProduction: DateTime
  oil: Float
  totalFluids: Float
  water: Float
}

type SourceOptions {
  disabled: Boolean!
  facility: String
  id: String!
  satellite: String
  source: String!
}

type Subscription {
  chronologicalEdgeAllocationProgress(data: AllocationInput!): AllocationProgressObject!
  pipelineFlowAllocationProgress(data: AllocationInput!): AllocationProgressObject!
  pressureTestAllocationProgress(data: AllocationInput!): AllocationProgressObject!
  riskAllocationProgress(data: AllocationInput!): AllocationProgressObject!
  wellFlowAllocationProgress(data: AllocationInput!): AllocationProgressObject!
}

enum TableEnum {
  cathodicSurveys
  chemical
  downstreamPipelines
  facility
  geotechnicalParameters
  licenseChanges
  pigRuns
  pipeline
  pipelineBatches
  pressureTests
  risk
  salesPoints
  satellite
  upstreamPipelines
  wells
}

type User {
  email: String!
  facilitiesCreated: [Facility]
  facilitiesUpdated: [Facility]
  firstName: String!
  id: String!
  lastName: String!
  licenseChangesCreated: [LicenseChange]
  licenseChangesUpdated: [LicenseChange]
  pipelinesCreated: [Pipeline]
  pipelinesUpdated: [Pipeline]
  risksCreated: [Risk]
  risksUpdated: [Risk]
  role: UserRoleEnum!
  satellitesCreated: [Satellite]
  satellitesUpdated: [Satellite]
  wellsCreated: [Well]
  wellsUpdated: [Well]
}

input UserCreateInput {
  confirmPassword: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  role: UserRoleEnum!
}

input UserRegisterInput {
  email: String!
  firstName: String!
  lastName: String!
  role: UserRoleEnum!
}

enum UserRoleEnum {
  ADMIN
  CATHODIC
  CHEMICAL
  CONTRACTOR
  ENGINEER
  OFFICE
  OPERATOR
  REGULATORY
}

input UserUniqueInput {
  email: String
  id: String
}

type ValidatorsPipeline {
  batchProductEnum: [EnumObject!]!
  chemicalSupplierEnum: [EnumObject!]!
  companyEnum: [EnumObject!]!
  flowCalculationDirectionEnum: [EnumObject!]!
  fromToFeatureEnum: [EnumObject!]!
  fromToMatchPattern: String!
  geotechnicalFacingEnum: [EnumObject!]!
  gradeEnum: [EnumObject!]!
  havingEnum: [EnumObject!]!
  internalProtectionEnum: [EnumObject!]!
  lengthMatchPattern: String!
  licenseMatchPattern: String!
  limitingSpecEnum: [EnumObject!]!
  materialEnum: [EnumObject!]!
  mopMatchPattern: String!
  operationEnum: [EnumObject!]!
  operatorEnum: [EnumObject!]!
  outsideDiameterMatchPattern: String!
  pigInspectionEnum: [EnumObject!]!
  pigTypeEnum: [EnumObject!]!
  pipelineTypeEnum: [EnumObject!]!
  riskEnvironmentEnum: [EnumObject!]!
  satelliteEnum: [EnumObject!]!
  segmentMatchPattern: String!
  solubilityEnum: [EnumObject!]!
  statusEnum: [EnumObject!]!
  substanceEnum: [EnumObject!]!
  wallThicknessMatchPattern: String!
  yieldStrengthMatchPattern: String!
}

type ValidatorsUserRole {
  userRoleEnum: [EnumObject!]!
}

type Well {
  authorized: Boolean!
  createdAt: DateTime!
  createdBy: User!
  createdById: String!
  fdcRecId: String
  firstInjection: DateTime
  firstProduction: DateTime
  gas: Float!
  gasAssociatedLiquids: Float!
  id: String!
  lastInjection: DateTime
  lastProduction: DateTime
  name: String!
  oil: Float!
  pipeline: Pipeline
  totalFluids: Float!
  updatedAt: DateTime!
  updatedBy: User!
  updatedById: String!
  water: Float!
  wellBatches: [WellBatch]
}

type WellBatch {
  authorized: Boolean!
  chemicalVolume: Float
  comment: String
  cost: Float
  createdAt: DateTime!
  createdBy: User!
  date: DateTime!
  diluentVolume: Float
  id: String!
  product: BatchProduct!
  updatedAt: DateTime!
  updatedBy: User!
  well: Well!
}

type WellBatchPayload {
  error: FieldError
  wellBatch: WellBatch
}

input WellCreateInput {
  fdcRecId: String
  firstInjection: DateTime
  firstProduction: DateTime
  gas: Float!
  lastInjection: DateTime
  lastProduction: DateTime
  name: String!
  oil: Float!
  water: Float!
}

type WellPayload {
  error: FieldError
  well: Well
}
