### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  error: FieldError
  user: User
}

type BatchProduct {
  cost: Float
  createdAt: DateTime!
  createdBy: User!
  id: String!
  pipelineBatches: [PipelineBatch]
  product: String!
  productType: String
  solubility: SolubilityEnum!
  updatedAt: DateTime!
  updatedBy: User!
  wellBatches: [WellBatch]
}

type Chemical {
  authorized: Boolean!
  bacteria: Boolean
  bacteriaTreatment: Boolean
  baselineFluidAnalysisDate: DateTime
  batchFrequency: Int
  chemicalSupplier: ChemicalSupplier
  co2: Boolean
  comment: String
  continuousInjection: Boolean
  createdAt: DateTime!
  createdBy: User!
  downholeBatch: Boolean
  h2s: Boolean
  id: String!
  inhibitorPipelineBatch: Boolean
  injectionRate: Float
  o2: Boolean
  pipeline: Pipeline!
  scaleTreatment: Boolean
  scaling: Boolean
  updatedAt: DateTime!
  updatedBy: User!
}

type ChemicalPayload {
  chemical: Chemical
  error: FieldError
}

type ChemicalSupplier {
  authorized: Boolean!
  chemicals: [Chemical]
  createdAt: DateTime!
  createdBy: User!
  description: String
  id: String!
  name: String!
  updatedAt: DateTime!
  updatedBy: User!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type EnumObject {
  databaseEnum: String!
  serverEnum: String!
}

enum EnvironmentProximityToEnum {
  WB1
  WB3
  WB4
  WB5
  WC1
  WC2
  WC3
  WC4
}

type EnvironmentProximityToEnumObject {
  WB1: String!
  WB3: String!
  WB4: String!
  WB5: String!
  WC1: String!
  WC2: String!
  WC3: String!
  WC4: String!
}

type Facility {
  createdAt: DateTime!
  createdBy: User!
  id: String!
  name: String!
  satellites: [Satellite]
  updatedAt: DateTime!
  updatedBy: User!
}

input FacilityCreateInput {
  name: String!
  satellites: [SatelliteCreateInput]
}

input FacilityUniqueInput {
  id: String
  name: String
}

type FieldError {
  field: String!
  message: String!
}

enum FlowCalculationDirectionEnum {
  Downstream
  Upstream
}

type FlowCalculationDirectionEnumObject {
  Downstream: String!
  Upstream: String!
}

enum FromToFeatureEnum {
  Battery
  BlindEnd
  CompressorStation
  GasProcessingPlant
  Header
  InjectionPlant
  MeterStation
  Pipeline
  PumpStation
  Satellite
  StorageTank
  UndergroundCapOrTieIn
  Well
}

type FromToFeatureEnumObject {
  Battery: String!
  BlindEnd: String!
  CompressorStation: String!
  GasProcessingPlant: String!
  Header: String!
  InjectionPlant: String!
  MeterStation: String!
  Pipeline: String!
  PumpStation: String!
  Satellite: String!
  StorageTank: String!
  UndergroundCapOrTieIn: String!
  Well: String!
}

enum GeotechnicalFacingEnum {
  E
  N
  NE
  NW
  S
  SE
  SW
  W
}

type GeotechnicalFacingEnumObject {
  E: String!
  N: String!
  NE: String!
  NW: String!
  S: String!
  SE: String!
  SW: String!
  W: String!
}

enum GradeEnum {
  Grade5
  Grade9
  Grade11
  Grade17
  Grade25
  Grade35
  Grade150
  Grade155
  Grade200
  Grade241
  Grade300
  Grade800
  Grade810
  Grade900
  Grade1000
  Grade1103
  Grade1200
  Grade1250
  Grade2010
  Grade2250
  Grade2411
  Grade2413
  Grade2500
  Grade2750
  Grade2901
  Grade2902
  Grade3591
  Grade3592
  Grade3593
  GradeA
  GradeB
  GradeBW1
  GradeJ55
  GradeT1A
  GradeT1B
  GradeT4
  GradeT4A
  GradeX42
  GradeX52
}

type GradeEnumObject {
  Grade5: String!
  Grade9: String!
  Grade11: String!
  Grade17: String!
  Grade25: String!
  Grade35: String!
  Grade150: String!
  Grade155: String!
  Grade200: String!
  Grade241: String!
  Grade300: String!
  Grade800: String!
  Grade810: String!
  Grade900: String!
  Grade1000: String!
  Grade1103: String!
  Grade1200: String!
  Grade1250: String!
  Grade2010: String!
  Grade2250: String!
  Grade2411: String!
  Grade2413: String!
  Grade2500: String!
  Grade2750: String!
  Grade2901: String!
  Grade2902: String!
  Grade3591: String!
  Grade3592: String!
  Grade3593: String!
  GradeA: String!
  GradeB: String!
  GradeBW1: String!
  GradeJ55: String!
  GradeT1A: String!
  GradeT1B: String!
  GradeT4: String!
  GradeT4A: String!
  GradeX42: String!
  GradeX52: String!
}

enum HavingEnum {
  any
  count
  maximum
  minimum
}

type HavingEnumObject {
  _any: HavingEnum!
  _count: HavingEnum!
  _max: HavingEnum!
  _min: HavingEnum!
}

input HierarchyInput {
  id: String!
  table: TableEnum!
}

enum InternalProtectionEnum {
  Cement
  ExpandedPolyethylene
  FreeStandingSlipLined
  ThinFilm
  Uncoated
  Unknown
}

type InternalProtectionEnumObject {
  Cement: String!
  ExpandedPolyethylene: String!
  FreeStandingSlipLined: String!
  ThinFilm: String!
  Uncoated: String!
  Unknown: String!
}

type LicenseChange {
  authorized: Boolean!
  comment: String
  createdAt: DateTime!
  createdBy: User!
  date: DateTime!
  id: String!
  linkToDocumentation: String
  pipeline: Pipeline!
  status: StatusEnum!
  substance: SubstanceEnum!
  updatedAt: DateTime!
  updatedBy: User!
}

type LicenseChangePayload {
  error: FieldError
  licenseChange: LicenseChange
}

enum LimitingSpecEnum {
  ANSI150
  ANSI300
  ANSI600
}

type LimitingSpecEnumObject {
  ANSI150: String!
  ANSI300: String!
  ANSI600: String!
}

enum MaterialEnum {
  Aluminum
  AsbestosCement
  CelluloseAcetateButyrate
  Composite
  Fiberglass
  Polyethylene
  PolyvinylChloride
  Steel
  Unknown
}

type MaterialEnumObject {
  Aluminum: String!
  AsbestosCement: String!
  CelluloseAcetateButyrate: String!
  Composite: String!
  Fiberglass: String!
  Polyethylene: String!
  PolyvinylChloride: String!
  Steel: String!
  Unknown: String!
}

type Mutation {
  addChemical(id: String!): ChemicalPayload
  addLicenseChange(pipelineId: String!): LicenseChangePayload
  addPigRun(pipelineId: String!): PigRunPayload
  addPipelineBatch(pipelineId: String!): PipelineBatchPayload
  addPressureTest(pipelineId: String!): PressureTestPayload
  addRisk(id: String!): RiskPayload
  addWellBatch(wellId: String!): WellBatchPayload
  connectPipeline(id: String!, pipelineId: String!): PipelinePayload
  connectSalesPoint(id: String!, pipelineId: String!): SalesPointPayload
  connectWell(id: String!, pipelineId: String!): WellPayload
  createFacility(data: FacilityCreateInput!): Facility
  deleteChemical(id: String!): ChemicalPayload
  deleteLicenseChange(id: String!): LicenseChangePayload
  deletePigRun(id: String!): PigRunPayload
  deletePipeline(id: String!): PipelinePayload
  deletePipelineBatch(id: String!): PipelineBatchPayload
  deletePressureTest(id: String!): PressureTestPayload
  deleteRisk(id: String!): RiskPayload
  deleteSatellite(id: String!): Satellite
  deleteWellBatch(id: String!): WellBatchPayload
  disconnectPipeline(id: String!, pipelineId: String!): PipelinePayload
  disconnectSalesPoint(id: String!): SalesPointPayload
  disconnectWell(id: String!): WellPayload
  duplicatePipeline(id: String!): PipelinePayload
  editChemical(bacteria: Boolean, bacteriaTreatment: Boolean, baselineFluidAnalysisDate: DateTime, batchFrequency: Int, co2: Boolean, comment: String, continuousInjection: Boolean, downholeBatch: Boolean, h2s: Boolean, id: String!, inhibitorPipelineBatch: Boolean, injectionRate: Float, o2: Boolean, scaleTreatment: Boolean, scaling: Boolean): ChemicalPayload
  editFacility(id: String!, name: String): Facility
  editLicenseChange(comment: String, date: DateTime, id: String!, linkToDocumentation: String, status: StatusEnum, substance: SubstanceEnum): LicenseChangePayload
  editPigRun(comment: String, dateIn: DateTime, dateOut: DateTime, id: String!, isolationValveFunctionTest: PigInspectionEnum, operatorId: String, pigSenderReceiverInspection: PigInspectionEnum, pigType: PigTypeEnum): PigRunPayload
  editPipeline(flowCalculationDirection: FlowCalculationDirectionEnum, from: String, fromFeature: FromToFeatureEnum, grade: GradeEnum, id: String!, internalProtection: InternalProtectionEnum, length: Float, license: String, licenseDate: DateTime, material: MaterialEnum, mop: Int, outsideDiameter: Float, piggable: Boolean, piggingFrequency: Int, satelliteId: String, segment: String, to: String, toFeature: FromToFeatureEnum, type: TypeEnum, wallThickness: Float, yieldStrength: Int): PipelinePayload
  editPipelineBatch(chemicalVolume: Float, comment: String, cost: Float, date: DateTime, diluentVolume: Float, id: String!, product: String): PipelineBatchPayload
  editPressureTest(comment: String, ddsDate: DateTime, id: String!, infoSentOutDate: DateTime, integritySheetUpdated: DateTime, limitingSpec: LimitingSpecEnum, pressureTestDate: DateTime, pressureTestReceivedDate: DateTime): PressureTestPayload
  editRisk(aerialReview: Boolean, comment: String, consequencePeople: Int, dateSlopeChecked: DateTime, environmentProximityTo: EnvironmentProximityToEnum, gasReleaseCost: Float, geotechnicalFacingS1: GeotechnicalFacingEnum, geotechnicalFacingS2: GeotechnicalFacingEnum, geotechnicalHeightS1: Int, geotechnicalHeightS2: Int, geotechnicalSlopeAngleS1: Int, geotechnicalSlopeAngleS2: Int, id: String!, oilReleaseCost: Float, probabilityGeo: Int, releaseTimeDays: Int, repairTimeDays: Int, safeguardExternalCoating: Int, safeguardInternalProtection: Int): RiskPayload
  editSalesPoint(fdcRecId: String, firstInjection: DateTime, firstProduction: DateTime, gas: Float, id: String!, lastInjection: DateTime, lastProduction: DateTime, name: String, oil: Float, pipelineId: String, water: Float): SalesPointPayload
  editSatellite(facilityUniqueInput: FacilityUniqueInput, id: String!, name: String): Satellite
  editWell(fdcRecId: String, firstInjection: DateTime, firstProduction: DateTime, gas: Float, id: String!, lastInjection: DateTime, lastProduction: DateTime, name: String, oil: Float, pipelineId: String, water: Float): WellPayload
  editWellBatch(chemicalVolume: Float, comment: String, cost: Float, date: DateTime, diluentVolume: Float, id: String!, productId: String): WellBatchPayload
  login(email: String!, password: String!): AuthPayload
  logout: Boolean
  signup(userCreateInput: UserCreateInput!): AuthPayload
}

input NavigationInput {
  hierarchy: HierarchyInput
  search: [SearchNavigationInput!]
}

enum OperationEnum {
  contains
  endsWith
  equals
  greaterThan
  greaterThanOrEqual
  lessThan
  lessThanOrEqual
  not
  startsWith
}

type OperationEnumObject {
  contains: OperationEnum!
  endsWith: OperationEnum!
  equals: OperationEnum!
  gt: OperationEnum!
  gte: OperationEnum!
  lt: OperationEnum!
  lte: OperationEnum!
  not: OperationEnum!
  startsWith: OperationEnum!
}

enum PigInspectionEnum {
  Failed
  Good
}

type PigInspectionEnumObject {
  Failed: String!
  Good: String!
}

type PigRun {
  authorized: Boolean!
  comment: String
  createdAt: DateTime!
  createdBy: User!
  dateIn: DateTime!
  dateOut: DateTime
  id: String!
  isolationValveFunctionTest: PigInspectionEnum
  operator: User
  pigSenderReceiverInspection: PigInspectionEnum
  pigType: PigTypeEnum
  pipeline: Pipeline!
  updatedAt: DateTime!
  updatedBy: User!
}

type PigRunPayload {
  error: FieldError
  pigRun: PigRun
}

enum PigTypeEnum {
  Ball
  Black3inBall
  Blue3inscraper
  BlueRibbed
  BlueinScraper
  Foam
  GSCR
  Highline
  M_D_Foamy
  NoSender
  PigType1inStubby
  PigType2green2disc
  PigType2inGSCR
  PigType2inGSCR_GFP
  PigType2inPSCR
  PigType2inPSCR_FLM
  PigType2inPurpleDisc
  PigType2inStubby
  PigType2ingscr
  PigType2inpurple
  PigType2purple2disc
  PigType3
  PigType3_scrapper
  PigType3in
  PigType3inArgus
  PigType3inBlueRibbed
  PigType3inBrownRibbed
  PigType3inGSCR
  PigType3inGreenDisc
  PigType3inGreenRibbed
  PigType3inPSCR
  PigType3inPurpleScraper
  PigType3inPurpleStubby
  PigType3inRscr
  PigType3inSCRAPER
  PigType3inStubby
  PigType3inWhite
  PigType3ingreendisc
  PigType3inpurple2disc
  PigType3inpurpledisc
  PigType3inpurplescraper
  PigType3inredscrape
  PigType3inscapper
  PigType3inscr
  PigType3inscraper
  PigType3inscrapper
  PigType4Green
  PigType4GreenStubby
  PigType4_GreenRibbed
  PigType4gree2disc
  PigType4green2disc
  PigType4in
  PigType4inArgus
  PigType4inBlueDisc
  PigType4inFoam
  PigType4inGSCR
  PigType4inGreenDisc
  PigType4inGreendisc
  PigType4inpurplescraper
  PigType4inscrapper
  PigType6inArgus
  PigType6inGreenDisc
  PigType6inGreenRibbed
  PigType6inargus
  PigType6ingreenscraper
  PigType6inscrapper
  PigType8inBlackDisc
  PigType8inFoam
  Purple3inDisc
  Red3inscraper
  Red4inscraper
  RedStubby
  Redscraper
  SIMAY2018
  ScaperP314
  ScaperPP309
  ScraperP200
  ScraperP204
  ScraperP206
  ScraperP208
  ScraperP300
  ScraperP301
  ScraperP303
  ScraperP304
  ScraperP305
  ScraperP309
  ScraperP311
  ScraperP312
  ScraperP314
  ScraperP400
  ScraperP401
  Scrapper
  ScrapperP307
  Shutin
  Stubby
  Torpedo
  bullet
  disc
  redball
}

type PigTypeEnumObject {
  Ball: String!
  Black3inBall: String!
  Blue3inscraper: String!
  BlueRibbed: String!
  BlueinScraper: String!
  Foam: String!
  GSCR: String!
  Highline: String!
  M_D_Foamy: String!
  NoSender: String!
  PigType1inStubby: String!
  PigType2green2disc: String!
  PigType2inGSCR: String!
  PigType2inGSCR_GFP: String!
  PigType2inPSCR: String!
  PigType2inPSCR_FLM: String!
  PigType2inPurpleDisc: String!
  PigType2inStubby: String!
  PigType2ingscr: String!
  PigType2inpurple: String!
  PigType2purple2disc: String!
  PigType3: String!
  PigType3_scrapper: String!
  PigType3in: String!
  PigType3inArgus: String!
  PigType3inBlueRibbed: String!
  PigType3inBrownRibbed: String!
  PigType3inGSCR: String!
  PigType3inGreenDisc: String!
  PigType3inGreenRibbed: String!
  PigType3inPSCR: String!
  PigType3inPurpleScraper: String!
  PigType3inPurpleStubby: String!
  PigType3inRscr: String!
  PigType3inSCRAPER: String!
  PigType3inStubby: String!
  PigType3inWhite: String!
  PigType3ingreendisc: String!
  PigType3inpurple2disc: String!
  PigType3inpurpledisc: String!
  PigType3inpurplescraper: String!
  PigType3inredscrape: String!
  PigType3inscapper: String!
  PigType3inscr: String!
  PigType3inscraper: String!
  PigType3inscrapper: String!
  PigType4Green: String!
  PigType4GreenStubby: String!
  PigType4_GreenRibbed: String!
  PigType4gree2disc: String!
  PigType4green2disc: String!
  PigType4in: String!
  PigType4inArgus: String!
  PigType4inBlueDisc: String!
  PigType4inFoam: String!
  PigType4inGSCR: String!
  PigType4inGreenDisc: String!
  PigType4inGreendisc: String!
  PigType4inpurplescraper: String!
  PigType4inscrapper: String!
  PigType6inArgus: String!
  PigType6inGreenDisc: String!
  PigType6inGreenRibbed: String!
  PigType6inargus: String!
  PigType6ingreenscraper: String!
  PigType6inscrapper: String!
  PigType8inBlackDisc: String!
  PigType8inFoam: String!
  Purple3inDisc: String!
  Red3inscraper: String!
  Red4inscraper: String!
  RedStubby: String!
  Redscraper: String!
  SIMAY2018: String!
  ScaperP314: String!
  ScaperPP309: String!
  ScraperP200: String!
  ScraperP204: String!
  ScraperP206: String!
  ScraperP208: String!
  ScraperP300: String!
  ScraperP301: String!
  ScraperP303: String!
  ScraperP304: String!
  ScraperP305: String!
  ScraperP309: String!
  ScraperP311: String!
  ScraperP312: String!
  ScraperP314: String!
  ScraperP400: String!
  ScraperP401: String!
  Scrapper: String!
  ScrapperP307: String!
  Shutin: String!
  Stubby: String!
  Torpedo: String!
  bullet: String!
  disc: String!
  redball: String!
}

type Pipeline {
  authorized: Boolean!
  createdAt: DateTime!
  createdBy: User!
  currentStatus: StatusEnum
  currentSubstance: SubstanceEnum
  downstream: [Pipeline]
  firstLicenseDate: DateTime
  flowCalculationDirection: FlowCalculationDirectionEnum!
  from: String!
  fromFeature: FromToFeatureEnum
  grade: GradeEnum
  id: String!
  internalProtection: InternalProtectionEnum
  length: Float!
  license: String!
  licenseChanges: [LicenseChange]
  material: MaterialEnum
  mop: Int
  outsideDiameter: Float
  pigRuns: [PigRun]
  piggable: Boolean
  piggingFrequency: Int
  pressureTests: [PressureTest]
  risk: Risk
  salesPoints: [SalesPoint]
  satellite: Satellite
  segment: String!
  to: String!
  toFeature: FromToFeatureEnum
  type: TypeEnum
  updatedAt: DateTime!
  updatedBy: User!
  upstream: [Pipeline]
  wallThickness: Float
  wells: [Well]
  yieldStrength: Int
}

type PipelineBatch {
  authorized: Boolean!
  chemicalVolume: Float
  comment: String
  cost: Float
  createdAt: DateTime!
  createdBy: User!
  date: DateTime!
  diluentVolume: Float
  id: String!
  pipeline: Pipeline!
  product: BatchProduct!
  updatedAt: DateTime!
  updatedBy: User!
}

type PipelineBatchPayload {
  error: FieldError
  pipelineBatch: PipelineBatch
}

input PipelineCreateInput {
  downstream: [PipelineCreateInput]
  from: String!
  fromFeature: FromToFeatureEnum
  grade: GradeEnum
  internalProtection: InternalProtectionEnum
  length: Float!
  license: String!
  material: MaterialEnum
  mop: Int
  outsideDiameter: Float
  segment: String!
  to: String!
  toFeature: FromToFeatureEnum
  type: TypeEnum
  upstream: [PipelineCreateInput]
  wallThickness: Float
  wells: [WellCreateInput]
}

type PipelineFlow {
  authorized: Boolean!
  createdAt: DateTime!
  createdBy: User!
  firstInjection: DateTime
  firstProduction: DateTime
  gas: Float!
  gasAssociatedLiquids: Float!
  id: String!
  lastInjection: DateTime
  lastProduction: DateTime

  """
  This field is a concatenated license and segment of a pipeline to conform with Well and Sales Point objects
  """
  name: String!
  oil: Float!
  totalFluids: Float!
  updatedAt: DateTime!
  updatedBy: User!
  water: Float!
}

type PipelinePayload {
  error: FieldError
  pipeline: Pipeline
}

type PipelinesFlowAndSourceGroupBy {
  pipelinesFlow: [PipelineFlow]
  sourceGroupBy: SourceGroupBy
}

type PressureTest {
  authorized: Boolean!
  comment: String
  createdAt: DateTime!
  createdBy: User!
  ddsDate: DateTime
  id: String!
  infoSentOutDate: DateTime
  integritySheetUpdated: DateTime
  limitingSpec: LimitingSpecEnum
  maxPressureOfLimitingSpec: Float
  mopTestPressure: Float
  pipeline: Pipeline!
  pressureTestCorrosionAllowance: Float
  pressureTestDate: DateTime!
  pressureTestPressure: Float
  pressureTestReceivedDate: DateTime
  requiredWTForMop: Float
  requiredWTForTestPressure: Float
  updatedAt: DateTime!
  updatedBy: User!
  waterForPigging: Float
}

type PressureTestPayload {
  error: FieldError
  pressureTest: PressureTest
}

type Query {
  allFacilities: [Facility]
  allSatellites: [Satellite]
  allUsers: [User]
  chemicalById(id: String!): Chemical
  connectedPipelinesByPipelineId(flowCalculationDirection: FlowCalculationDirectionEnum!, id: String!): PipelinesFlowAndSourceGroupBy
  licenseChangesByPipelineId(pipelineId: String!): [LicenseChange]
  me: User
  pigRunsByPipelineId(pipelineId: String!): [PigRun]
  pipelineBatchesByPipelineId(pipelineId: String!): [PipelineBatch]
  pipelineFlow(flowCalculationDirection: FlowCalculationDirectionEnum!, id: String!): PipelineFlow
  pipelineOptions(id: String!): [SourceOptions]
  pipelinesById(navigationInput: NavigationInput!, skip: Int!, take: Int!): [Pipeline]
  pipelinesByUser(userUniqueInput: UserUniqueInput!): [Pipeline]
  pipelinesFlow(flowCalculationDirection: FlowCalculationDirectionEnum!, idList: [String]!): [PipelineFlow]
  pressureTestsByPipelineId(pipelineId: String!): [PressureTest]
  riskById(id: String!): Risk
  salesPointOptions(pipelineId: String!): [SourceOptions]
  salesPointsByPipelineId(pipelineId: String!): [SalesPoint]
  salesPointsGroupByPipelineId(pipelineId: String!): SourceGroupBy
  searchNavigationOptions: [SearchNavigationObject!]!
  sideBar: [SideBar]
  userCount: Int
  validators: Validator
  wellBatchesByWellId(wellId: String!): [WellBatch]
  wellOptions(pipelineId: String!): [SourceOptions]
  wellsByPipelineId(pipelineId: String!): [Well]
  wellsGroupByPipelineId(pipelineId: String!): SourceGroupBy
}

type Risk {
  aerialReview: Boolean
  authorized: Boolean!
  comment: String
  consequenceAsset: Int
  consequenceEnviro: Int
  consequenceMax: Int
  consequencePeople: Int
  costPerM3Released: Float
  createdAt: DateTime!
  createdBy: User!
  dateSlopeChecked: DateTime
  environmentProximityTo: EnvironmentProximityToEnum
  gasReleaseCost: Float
  geotechnicalFacingS1: GeotechnicalFacingEnum
  geotechnicalFacingS2: GeotechnicalFacingEnum
  geotechnicalHeightS1: Int
  geotechnicalHeightS2: Int
  geotechnicalSlopeAngleS1: Int
  geotechnicalSlopeAngleS2: Int
  id: String!
  oilReleaseCost: Float
  pipeline: Pipeline!
  probabilityExterior: Int
  probabilityExteriorWithSafeguards: Int
  probabilityGeo: Int
  probabilityInterior: Int
  probabilityInteriorWithSafeguards: Int
  releaseTimeDays: Int
  repairTimeDays: Int
  riskPotentialExternal: Int
  riskPotentialExternalWithSafeguards: Int
  riskPotentialGeo: Int
  riskPotentialInternal: Int
  riskPotentialInternalWithSafeguards: Int
  safeguardCathodic: Int
  safeguardChemicalInhibition: Int
  safeguardExternalCoating: Int
  safeguardInternalProtection: Int
  safeguardPigging: Int
  updatedAt: DateTime!
  updatedBy: User!
}

type RiskPayload {
  error: FieldError
  risk: Risk
}

type SalesPoint {
  authorized: Boolean!
  createdAt: DateTime!
  createdBy: User!
  fdcRecId: String
  firstInjection: DateTime
  firstProduction: DateTime
  gas: Float!
  gasAssociatedLiquids: Float!
  id: String!
  lastInjection: DateTime
  lastProduction: DateTime
  name: String!
  oil: Float!
  pipeline: Pipeline
  totalFluids: Float!
  updatedAt: DateTime!
  updatedBy: User!
  water: Float!
}

input SalesPointCreateInput {
  fdcRecId: String
  firstInjection: DateTime
  firstProduction: DateTime
  gas: Float!
  lastInjection: DateTime
  lastProduction: DateTime
  name: String!
  oil: Float!
  water: Float!
}

type SalesPointPayload {
  error: FieldError
  salesPoint: SalesPoint
}

type Satellite {
  createdAt: DateTime!
  createdBy: User!
  facility: Facility
  id: String!
  name: String!
  pipelines: [Pipeline]
  updatedAt: DateTime!
  updatedBy: User!
}

input SatelliteCreateInput {
  injectionPoints: [WellCreateInput]
  name: String!
  pipelines: [PipelineCreateInput]
}

type SatelliteSideBar {
  id: String!
  name: String!
}

input SatelliteUniqueInput {
  id: String
  name: String
}

input SearchNavigationInput {
  field: String!
  having: HavingEnum!
  operation: OperationEnum!
  table: TableEnum!
  type: String!
  value: String!
}

type SearchNavigationObject {
  enumObjectArray: [EnumObject!]
  field: String!
  nullable: Boolean!
  table: TableEnum!
  type: String!
}

type SideBar {
  id: String!
  name: String!
  satellites: [SatelliteSideBar!]!
}

enum SolubilityEnum {
  Oil
  Water
}

type SolubilityEnumObject {
  Oil: String!
  Water: String!
}

type SourceGroupBy {
  firstInjection: DateTime
  firstProduction: DateTime
  gas: Float
  gasAssociatedLiquids: Float
  lastInjection: DateTime
  lastProduction: DateTime
  oil: Float
  totalFluids: Float
  water: Float
}

type SourceOptions {
  disabled: Boolean!
  facility: String
  id: String!
  satellite: String
  source: String!
}

enum StatusEnum {
  Abandoned
  Active
  Cancelled
  Discontinued
  New
  NotConstructed
  Operating
  Removed
  ToBeConstructed
}

type StatusEnumObject {
  Abandoned: String!
  Active: String!
  Cancelled: String!
  Discontinued: String!
  New: String!
  NotConstructed: String!
  Operating: String!
  Removed: String!
  ToBeConstructed: String!
}

enum SubstanceEnum {
  CrudeOil
  FreshWater
  FuelGas
  LVPProducts
  NaturalGas
  OilWellEffluent
  SaltWater
  SourNaturalGas
}

type SubstanceEnumObject {
  CrudeOil: String!
  FreshWater: String!
  FuelGas: String!
  LVPProducts: String!
  NaturalGas: String!
  OilWellEffluent: String!
  SaltWater: String!
  SourNaturalGas: String!
}

enum TableEnum {
  chemical
  facility
  licenseChanges
  pigRuns
  pipeline
  pipelineBatches
  pressureTests
  risk
  salesPoints
  satellite
  wells
}

enum TypeEnum {
  Type5A
  Type5L
  Type5LX
  Type515
  Type2306
  Type3406
  Type3408
  Type6063
  Type6351
  TypeA53
  TypeA106
  TypeA120
  TypeAMERON
  TypeB5IS
  TypeB51S
  TypeB515
  TypeCENTRON
  TypeCIBA
  TypeFSLP
  TypeREDTHR
  TypeSMITH
  TypeSTAR
  TypeTBS
  TypeWSLP
  TypeZ2451
  TypeZ2453
}

type TypeEnumObject {
  Type5A: String!
  Type5L: String!
  Type5LX: String!
  Type515: String!
  Type2306: String!
  Type3406: String!
  Type3408: String!
  Type6063: String!
  Type6351: String!
  TypeA53: String!
  TypeA106: String!
  TypeA120: String!
  TypeAMERON: String!
  TypeB5IS: String!
  TypeB51S: String!
  TypeB515: String!
  TypeCENTRON: String!
  TypeCIBA: String!
  TypeFSLP: String!
  TypeREDTHR: String!
  TypeSMITH: String!
  TypeSTAR: String!
  TypeTBS: String!
  TypeWSLP: String!
  TypeZ2451: String!
  TypeZ2453: String!
}

type User {
  email: String!
  facilitiesCreated: [Facility]
  facilitiesUpdated: [Facility]
  firstName: String!
  id: String!
  lastName: String!
  licenseChangesCreated: [LicenseChange]
  licenseChangesUpdated: [LicenseChange]
  pipelinesCreated: [Pipeline]
  pipelinesUpdated: [Pipeline]
  risksCreated: [Risk]
  risksUpdated: [Risk]
  role: UserRoleEnum!
  satellitesCreated: [Satellite]
  satellitesUpdated: [Satellite]
  wellsCreated: [Well]
  wellsUpdated: [Well]
}

input UserCreateInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  role: UserRoleEnum!
}

enum UserRoleEnum {
  ADMIN
  CATHODIC
  CHEMICAL
  CONTRACTOR
  ENGINEER
  OFFICE
  OPERATOR
}

type UserRoleEnumObject {
  ADMIN: String!
  CATHODIC: String!
  CHEMICAL: String!
  CONTRACTOR: String!
  ENGINEER: String!
  OFFICE: String!
  OPERATOR: String!
}

input UserUniqueInput {
  email: String
  id: String
}

type Validator {
  anyTextMatchPattern: String!
  environmentProximityToEnum: EnvironmentProximityToEnumObject!
  flowCalculationDirectionEnum: FlowCalculationDirectionEnumObject!
  fromToFeatureEnum: FromToFeatureEnumObject!
  fromToMatchPattern: String!
  geotechnicalFacingEnum: GeotechnicalFacingEnumObject!
  gradeEnum: GradeEnumObject!
  havingEnum: HavingEnumObject!
  internalProtectionEnum: InternalProtectionEnumObject!
  lengthMatchPattern: String!
  licenseMatchPattern: String!
  limitingSpecEnum: LimitingSpecEnumObject!
  materialEnum: MaterialEnumObject!
  mopMatchPattern: String!
  operationEnum: OperationEnumObject!
  outsideDiameterMatchPattern: String!
  pigInspectionEnum: PigInspectionEnumObject!
  pigTypeEnum: PigTypeEnumObject!
  segmentMatchPattern: String!
  solubilityEnum: SolubilityEnumObject!
  statusEnum: StatusEnumObject!
  substanceEnum: SubstanceEnumObject!
  typeEnum: TypeEnumObject!
  userRoleEnum: UserRoleEnumObject!
  wallThicknessMatchPattern: String!
  yieldStrengthMatchPattern: String!
}

type Well {
  authorized: Boolean!
  createdAt: DateTime!
  createdBy: User!
  fdcRecId: String
  firstInjection: DateTime
  firstProduction: DateTime
  gas: Float!
  gasAssociatedLiquids: Float!
  id: String!
  lastInjection: DateTime
  lastProduction: DateTime
  name: String!
  oil: Float!
  pipeline: Pipeline
  totalFluids: Float!
  updatedAt: DateTime!
  updatedBy: User!
  water: Float!
  wellBatches: [WellBatch]
}

type WellBatch {
  authorized: Boolean!
  chemicalVolume: Float
  comment: String
  cost: Float
  createdAt: DateTime!
  createdBy: User!
  date: DateTime!
  diluentVolume: Float
  id: String!
  product: BatchProduct!
  updatedAt: DateTime!
  updatedBy: User!
  well: Well!
}

type WellBatchPayload {
  error: FieldError
  wellBatch: WellBatch
}

input WellCreateInput {
  fdcRecId: String
  firstInjection: DateTime
  firstProduction: DateTime
  gas: Float!
  lastInjection: DateTime
  lastProduction: DateTime
  name: String!
  oil: Float!
  water: Float!
}

type WellPayload {
  error: FieldError
  well: Well
}
