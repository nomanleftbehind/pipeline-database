mutation Login($email: String!, $password: String!) {
  login(email: $email, password: $password) {
    token
    user {
      id
      email
      firstName
      lastName
      role
    }
    errors {
      field
      message
    }
  }
}

mutation deletePipeline($id: String!) {
  deletePipeline(id: $id) {
    id
    license
    segment
  }
}

mutation duplicatePipeline($id: String!) {
duplicatePipeline(id: $id) {
  id
  license
  segment
}
}

mutation connectUpstreamPipeline($id: String!, $upstreamId: String!) {
  connectUpstreamPipeline(id: $id, upstreamId: $upstreamId) {
    id
    upstream {
      id
    }
  }
}

mutation disconnectUpstreamPipeline($id: String!, $upstreamId: String!) {
  disconnectUpstreamPipeline(id: $id, upstreamId: $upstreamId) {
    id
    upstream {
      id
    }
  }
}

mutation connectSource($id: String!, $sourceId: String!) {
  connectSource(id: $id, sourceId: $sourceId) {
    id
    injectionPoints {
      id
    }
  }
}

mutation disconnectSource($id: String!, $sourceId: String!) {
  disconnectSource(id: $id, sourceId: $sourceId) {
    id
    injectionPoints {
      id
    }
  }
}

mutation EditPipeline($id: String!, $satelliteId: String, $license: String, $segment: String, $substance: SubstanceEnum, $from: String, $fromFeature: FromToFeatureEnum, $to: String, $toFeature: FromToFeatureEnum, $status: StatusEnum, $licenseDate: DateTime, $length: Float, $type: TypeEnum, $grade: GradeEnum, $yieldStrength: Int, $outsideDiameter: Float, $wallThickness: Float, $material: MaterialEnum, $mop: Int, $internalProtection: InternalProtectionEnum, $piggable: Boolean, $piggingFrequency: Int) {
  editPipeline(id: $id, satelliteId: $satelliteId, license: $license, segment: $segment, substance: $substance, from: $from, fromFeature: $fromFeature, to: $to, toFeature: $toFeature, status: $status, licenseDate: $licenseDate, length: $length, type: $type, grade: $grade, yieldStrength: $yieldStrength, outsideDiameter: $outsideDiameter, wallThickness: $wallThickness, material: $material, mop: $mop, internalProtection: $internalProtection, piggable: $piggable, piggingFrequency: $piggingFrequency) {
    id
    license
    segment
  }
}

mutation EditPigRun($id: String!, $pipelineId: String, $pigType: PigTypeEnum, $date: DateTime, $comment: String, $operatorId: String) {
  editPigRun(id: $id, pipelineId: $pipelineId, pigType: $pigType, date: $date, comment: $comment, operatorId: $operatorId) {
    id
  }
}

mutation EditPressureTest($id: String!, $pipelineId: String, $limitingSpec: LimitingSpecEnum, $infoSentOutDate: DateTime, $ddsDate: DateTime, $pressureTestDate: DateTime, $pressureTestReceivedDate: DateTime, $integritySheetUpdated: DateTime, $comment: String) {
  editPressureTest(id: $id, pipelineId: $pipelineId, limitingSpec: $limitingSpec, infoSentOutDate: $infoSentOutDate, ddsDate: $ddsDate, pressureTestDate: $pressureTestDate, pressureTestReceivedDate: $pressureTestReceivedDate, integritySheetUpdated: $integritySheetUpdated, comment: $comment) {
    id
  }
}

mutation AddPressureTest($pipelineId: String!) {
  addPressureTest(pipelineId: $pipelineId) {
    id
  }
}